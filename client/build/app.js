!function(){"use strict";function t(t,o,e,n,r,a,l){function i(t,o,e,n,r){var a;return e(function(){a=o.get("auth")}),{responseError:function(o){return 401===o.status&&(a.signout(),n.remove("profile"),n.remove("token"),r.path("/home")),t.reject(o)}}}i.$inject=["$q","$injector","$timeout","store","$location"],e.init({domain:"danielnitu.eu.auth0.com",clientID:"1gLOvetcrjC9GW2kEeRzEtJRJH700ia6"}),n.otherwise("/welcome"),r.state("welcome",{url:"/welcome",templateUrl:"app/components/welcome/welcome.template.html"}).state("home",{url:"/home",templateUrl:"app/components/home/home.template.html",controller:"homeController as home"}).state("profile",{url:"/profile",templateUrl:"app/components/profile/profile.template.html",controller:"profileController as profile"}).state("portfolio",{url:"/portfolio",templateUrl:"app/components/portfolio/portfolio.template.html",controller:"portfolioController as portfolio"}).state("stock",{url:"/stock/:symbol/:market",templateUrl:"app/components/stock/stock.template.html",controller:"stockController as stock"}).state("news",{url:"/news/:symbol",templateUrl:"app/components/news/news.template.html",controller:"newsController as news"}).state("transactions",{url:"/transactions",templateUrl:"app/components/transactions/transactions.template.html",controller:"transactionsController as transactions"}),l.config({tokenGetter:["options",function(t){return".html"===t.url.substr(t.url.length-5)?null:window.localStorage.getItem("token").slice(1,-1)}],whiteListedDomains:["trade.boutique","localhost","jsonplaceholder.typicode.com"]}),t.theme("default").primaryPalette("blue").accentPalette("grey").warnPalette("red"),t.theme("dark-blue").backgroundPalette("blue").dark(),o.factory("redirect",i),a.interceptors.push("jwtInterceptor"),a.interceptors.push("redirect")}function o(t,o,e,n,r,a){t.$on("$locationChangeStart",function(){var t=n.get("token");t&&(r.isTokenExpired(t)||e.isAuthenticated||(document.body.classList.add("logged-in"),e.authenticate(n.get("profile"),t))),e.isAuthenticated||a.path("/home")})}t.$inject=["$mdThemingProvider","$provide","authProvider","$urlRouterProvider","$stateProvider","$httpProvider","jwtOptionsProvider"],o.$inject=["$rootScope","$state","auth","store","jwtHelper","$location"],angular.module("app",["auth0","angular-storage","angular-jwt","ngMaterial","ui.router","ngLetterAvatar","sidenav","profile","price","news","avatar"]).config(t).run(o)}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(o,e){n.loading(s.loading,!0),s.buyQuantity=e,s.buyPrice=(e*o).toFixed(2);var a=s.user.stock.quantity,l=r.weightedAverage(s.user.stock.price,o,a,e),i=s.user.stock.quantity+e,c=s.user.funds-(o*e).toFixed(2);r.buyStock(s.symbol,s.company,l,o,i,c,a,function(o,e){n.loading(s.loading,!1),t.$broadcast("transaction"),o?s.error=o:(s.closeDialog(),s.showToast("bought",s.buyQuantity,s.symbol,s.buyPrice.replace(/(\d)(?=(\d{3})+\.)/g,"$1,")))})}var s=this;s.stockQuantity=1,s.buyQuantity=0,s.buyPrice=0,s.symbol=a,s.company=l,s.loading=!1,s.closeDialog=n.closeDialog,s.showToast=n.showToast,s.buyStock=i,e.getPrice(s.symbol,null,function(t,o){t?s.error=t:s.stockPrice=o}),r.getStockAndFunds(s.symbol,function(t,o){t?s.error=t:s.user=o})}t.$inject=["$rootScope","$mdDialog","price","dialog","profile","passSymbol","passCompany"],angular.module("app").controller("buyDialogController",t)}(),function(){"use strict";function t(t,o,e){function n(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"buyDialogController",controllerAs:"buyDialog",templateUrl:"app/components/dialog/buyDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function r(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"sellDialogController",controllerAs:"sellDialog",templateUrl:"app/components/dialog/sellDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function a(t,e,n,r){o.show(o.simple().textContent("You "+t+" "+e+" "+n+" shares for $"+r).position("bottom right").hideDelay(5e3).toastClass("bs-toast"))}function l(){t.hide()}function i(t,o,n){e(function(){t=o},n||500)}return{showBuy:n,showSell:r,closeDialog:l,showToast:a,loading:i}}t.$inject=["$mdDialog","$mdToast","$timeout"],angular.module("app").factory("dialog",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(o,r){n.loading(i.loading,!0);var l=i.user.stock.quantity-r,s=(i.stockPrice-i.userStockPrice)*r;e.sellStock(i.symbol,a,o,r,s,l,function(e,a){n.loading(i.loading,!1),t.$broadcast("transaction"),e?(i.loading=!1,i.error=e):(i.closeDialog(),i.showToast("sold",r,i.symbol,(o*r).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")))})}var i=this;i.symbol=r,i.loading=!1,i.closeDialog=n.closeDialog,i.showToast=n.showToast,i.sellStock=l,o.getPrice(i.symbol,null,function(t,o){t?i.error=t:i.stockPrice=o}),e.getStockAndFunds(i.symbol,function(t,o){t?i.error=t:(i.user=o,i.stockQuantity=i.user.stock.quantity,i.userStockPrice=i.user.stock.price)})}t.$inject=["$rootScope","price","profile","dialog","passSymbol","passCompany"],angular.module("app").controller("sellDialogController",t)}(),function(){"use strict";function t(){function t(t){return t.forEach(function(t){t.avatar=o(t.company)}),t}function o(t){var o=t.split(" ",2),e="";return o.forEach(function(t){"Inc."!==t&&(e+=t[0])}),e.toUpperCase()}return{setAvatar:t,initials:o}}angular.module("avatar",[]).factory("avatar",t)}(),function(){"use strict";function t(t){return{restrict:"A",link:function(o,e,n){e.addClass("ng-hide"),t(function(){e.removeClass("ng-hide")},n.showWithDelay||2e3)}}}t.$inject=["$timeout"],angular.module("app").directive("showWithDelay",t)}(),function(){"use strict";function t(t){function o(o,e,n){null!==e?t.get("/api/price/"+o+"/"+e).then(function(t){return n(null,t.data.price.price)},function(t){return n("Error: "+t.data.error,null)}):t.get("/api/price/"+o).then(function(t){return n(null,t.data.price.price)},function(t){return n("Error: status "+t.status,null)})}function e(o,e){t.post("/api/price/multiple",o).then(function(t){return e(null,t.data.prices)},function(t){return e("Error: status "+t.status,null)})}return{getPrice:o,getPrices:e}}t.$inject=["$http"],angular.module("price",[]).factory("price",t)}(),function(){"use strict";function t(t,o){function e(e){n.loading=!0,n.markets.includes(e)?t.get("/api/risefall/"+e).then(function(t){t.data.error?n.error=t.data.error:(n.error=null,n.stocks=t.data.stocks,o.setAvatar(n.stocks),n.loading=!1)}):n.error="No such market: "+e}var n=this;n.markets=["US","LSE","EURO","TMX","HKE","INDIA"],n.loading=!1,n.getRisersFallers=e,e("US")}t.$inject=["$http","avatar"],angular.module("app").controller("homeController",t)}(),function(){"use strict";function t(t,o,e){function n(t){e.getNews(t,function(t,o){t?r.error=t:console.log(o)})}var r=this;r.getNews=n,"news"===t.current.name?function(){e.getRandomNews(function(t,o){t?r.error=t:(r.news=[],o.data.news.forEach(function(t){for(var o=0;o<10;o++)r.news.push(t.news[o])}),e.shuffleNews(r.news))})}():n(o.symbol)}t.$inject=["$state","$stateParams","news"],angular.module("app").controller("newsController",t)}(),function(){"use strict";function t(t){function o(o,e){t.get("/api/news/symbol/"+o).then(function(t){e(null,t)},function(t){e(t,null)})}function e(o){t.get("/api/news/random").then(function(t){o(null,t)},function(t){o(t,null)})}function n(t){for(var o,e,n=t.length;n;)e=Math.floor(Math.random()*n--),o=t[n],t[n]=t[e],t[e]=o;return t}return{getNews:o,getRandomNews:e,shuffleNews:n}}t.$inject=["$http"],angular.module("news",[]).factory("news",t)}(),function(){"use strict";function t(t,o,e,n,r){function a(){o.get("/api/user/portfolio").then(function(t){t.data.message?s.noPortfolio=t.data.message:(s.portfolio=t.data.portfolio,s.funds=t.data.funds,l(s.portfolio),r.setAvatar(s.portfolio))})}function l(t){var o=[];t.forEach(function(t){o.push(t.symbol)}),e.getPrices(o,function(t,o){t?s.error=t:i(s.portfolio,o)})}function i(t,o){return t.forEach(function(t){o.forEach(function(o){o.symbol===t.symbol&&(t.currPrice=o.price,t.market=o.market)})}),t}var s=this;s.showSell=n.showSell,s.showBuy=n.showBuy,s.getPortfolio=a,t.$on("transaction",function(){a()}),a()}t.$inject=["$scope","$http","price","dialog","avatar"],angular.module("app").controller("portfolioController",t)}(),function(){"use strict";function t(t,o){function e(o){return t.get("/api/data/symbols/"+o).then(function(t){var o=[];return t.data.data.forEach(function(t){o.push(t.symbol)}),o})}function n(t){if(!t)return!1;o.transitionTo("stock",{symbol:t})}var r=this;r.queryStock=e,r.getData=n}t.$inject=["$http","$state"],angular.module("app").controller("searchController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/search/search.template.html",controller:"searchController",controllerAs:"search"}}angular.module("app").directive("search",t)}(),function(){"use strict";function t(t,o){var e=this;e.profile=o.getProfile(),o.getFunds(function(t,o){t?e.error=t:e.funds=o})}t.$inject=["$http","profile"],angular.module("app").controller("profileController",t)}(),function(){"use strict";function t(t){function o(){var t=JSON.parse(window.localStorage.getItem("profile"));return~t.name.indexOf("@")&&(t.name=t.name.split("@")[0]),t}function e(o){t.get("/api/user/").then(function(t){o(t.data.user)})}function n(o){t.get("/api/user/funds/").then(function(t){o(null,t.data.funds)},function(t){o("Error: Cannot get funds!"+t,null)})}function r(o,e){t.get("/api/user/portfolio/"+o).then(function(t){var o={stock:t.data.stock,funds:t.data.funds};e(null,o)},function(t){e("Error: status"+t.status,null,null)})}function a(o,e,n,r,a,l,i,s){var c={symbol:o,company:e,price:n,buyPrice:r,quantity:a,funds:l.toFixed(3),exists:i};t.post("/api/user/buy",c).then(function(t){s(null,t)},function(t){s(t,null)})}function l(o,e,n,r,a,l,i){var s={symbol:o,company:e,sellPrice:n,quantity:r,profit:a,sellAll:l};t.post("api/user/sell",s).then(function(t){i(null,t)},function(t){console.log(t),i(t,null)})}function i(t,o,e,n){return((t*e+o*n)/(e+n)).toFixed(3)}return{getUser:e,getStockAndFunds:r,getProfile:o,getFunds:n,buyStock:a,sellStock:l,weightedAverage:i}}t.$inject=["$http"],angular.module("profile",[]).factory("profile",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l,i){function s(){i.getFunds(function(t,o){t&&(p.error=t),p.funds=o})}function c(){t.get("http://localhost:3000/api/news/AAPL",{skipAuthorization:!0}).then(function(t){p.message=t.data.news.symbol})}function u(){r.signout(),a.remove("profile"),a.remove("token"),p.sidenavShow=!1,document.body.classList.remove("logged-in"),o.$broadcast("userLogOut"),p.userLogged=!1,n.path("/home")}var p=this;p.getNews=c,p.logout=u,p.closeSidenav=l.closeSidenav,p.auth=r,p.message="",p.sidenavShow=!1,p.auth.isAuthenticated&&(p.profile=i.getProfile(),p.sidenavShow=!0,s()),e.$on("userLogIn",function(){p.profile=i.getProfile(),p.sidenavShow=!0,s()}),e.$on("transaction",function(){s()})}t.$inject=["$http","$rootScope","$scope","$location","auth","store","sidenav","profile"],angular.module("app").controller("sidenavController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/sidenav/sidenav.template.html",controller:"sidenavController",controllerAs:"sidenav"}}angular.module("app").directive("sidenav",t)}(),function(){"use strict";function t(t,o,e){function n(o){t(o||"left").toggle()}function r(o){t(o||"left").close()}return{toggleSidenav:n,closeSidenav:r}}t.$inject=["$mdSidenav","auth","store"],angular.module("sidenav",[]).factory("sidenav",t)}(),function(){"use strict";function t(t,o,e,n,r,a){var l=this;l.loading=!1,l.showBuy=e.showBuy,l.showSell=e.showSell,function(){l.loading=!0,o.get("/api/data/symbol/"+t.symbol+"/"+t.market).then(function(o){o.data.error?(l.noCompany=o.data.error,l.loading=!1):(l.company=o.data.data,n.getPrice(t.symbol,t.market||l.company.market,function(t,o){t?l.error=t:l.price=o}),r.getNews(t.symbol,function(t,o){if(t)l.newsError="Error getting news";else try{l.news=o.data.news.news}catch(t){l.newsError=t}l.loading=!1}),l.avatar=a.initials(l.company.company||t.symbol))})}()}t.$inject=["$stateParams","$http","dialog","price","news","avatar"],angular.module("app").controller("stockController",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(){t.signin({authParams:{scope:"openid email"}},function(t,n){o.set("profile",t),o.set("token",n),e.path("/home"),document.body.classList.add("logged-in"),r.$broadcast("userLogIn"),i.userLogged=!0},function(t){console.log(t)})}var i=this;i.login=l,i.auth=t,i.toggleSidenav=a.toggleSidenav,i.userLogged=!1,t.isAuthenticated&&(i.userLogged=!0),n.$on("userLogOut",function(){i.userLogged=!1})}t.$inject=["auth","store","$location","$scope","$rootScope","sidenav"],angular.module("app").controller("toolbarController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/toolbar/toolbar.template.html",controller:"toolbarController",controllerAs:"toolbar"}}angular.module("app").directive("toolbar",t)}(),function(){"use strict";function t(t,o){var e=this;!function(){t.get("/api/transaction/all").then(function(t){t.data.error?e.noTransactions=t.data.error:(e.transactions=t.data.transactions,o.setAvatar(e.transactions))},function(t){e.error=t})}()}t.$inject=["$http","avatar"],angular.module("app").controller("transactionsController",t)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
