!function(){"use strict";angular.module("app",["auth0","angular-storage","angular-jwt","ngMaterial","ui.router","ngLetterAvatar","sidenav","profile","price","news","avatar"])}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(t,o,e,n,r){var a;return e(function(){a=o.get("auth")}),{responseError:function(o){return 401===o.status&&(a.signout(),n.remove("profile"),n.remove("token"),r.path("/welcome")),t.reject(o)}}}i.$inject=["$q","$injector","$timeout","store","$location"],e.init({domain:"danielnitu.eu.auth0.com",clientID:"1gLOvetcrjC9GW2kEeRzEtJRJH700ia6"}),n.otherwise("/welcome"),r.state("welcome",{url:"/welcome",templateUrl:"app/components/welcome/welcome.template.html",controller:"toolbarController as toolbar"}).state("about",{url:"/about",templateUrl:"app/components/about/about.template.html"}).state("home",{url:"/home",templateUrl:"app/components/home/home.template.html",controller:"homeController as home"}).state("profile",{url:"/profile",templateUrl:"app/components/profile/profile.template.html",controller:"profileController as profile"}).state("portfolio",{url:"/portfolio",templateUrl:"app/components/portfolio/portfolio.template.html",controller:"portfolioController as portfolio"}).state("stock",{url:"/stock/:symbol/:market",templateUrl:"app/components/stock/stock.template.html",controller:"stockController as stock"}).state("news",{url:"/news/:symbol",templateUrl:"app/components/news/news.template.html",controller:"newsController as news"}).state("transactions",{url:"/transactions",templateUrl:"app/components/transactions/transactions.template.html",controller:"transactionsController as transactions"}),l.config({tokenGetter:["options",function(t){return".html"===t.url.substr(t.url.length-5)?null:window.localStorage.getItem("token").slice(1,-1)}],whiteListedDomains:["trade.boutique","localhost","jsonplaceholder.typicode.com"]}),t.theme("default").primaryPalette("blue").accentPalette("grey").warnPalette("red"),t.theme("dark-blue").backgroundPalette("blue").dark(),o.factory("redirect",i),a.interceptors.push("jwtInterceptor"),a.interceptors.push("redirect")}t.$inject=["$mdThemingProvider","$provide","authProvider","$urlRouterProvider","$stateProvider","$httpProvider","jwtOptionsProvider"],angular.module("app").config(t)}(),function(){"use strict";function t(t,o,e,n,r,a){t.$on("$locationChangeStart",function(){var t=n.get("token");t&&(r.isTokenExpired(t)||e.isAuthenticated||(document.body.classList.add("logged-in"),e.authenticate(n.get("profile"),t))),e.isAuthenticated||a.path("/welcome")})}t.$inject=["$rootScope","$state","auth","store","jwtHelper","$location"],angular.module("app").run(t)}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(o,e){n.loading(s.loading,!0),s.buyQuantity=e,s.buyPrice=(e*o).toFixed(2);var a=s.user.stock.quantity,l=r.weightedAverage(s.user.stock.price,o,a,e),i=s.user.stock.quantity+e,c=s.user.funds-(o*e).toFixed(2);r.buyStock(s.symbol,s.company,l,o,i,c,a,function(o,e){n.loading(s.loading,!1),t.$broadcast("transaction"),o?s.error=o:(s.closeDialog(),s.showToast("bought",s.buyQuantity,s.symbol,s.buyPrice.replace(/(\d)(?=(\d{3})+\.)/g,"$1,")))})}var s=this;s.stockQuantity=1,s.buyQuantity=0,s.buyPrice=0,s.symbol=a,s.company=l,s.loading=!1,s.closeDialog=n.closeDialog,s.showToast=n.showToast,s.buyStock=i,e.getPrice(s.symbol,null,function(t,o){t?s.error=t:s.stockPrice=o.price}),r.getStockAndFunds(s.symbol,function(t,o){t?s.error=t:s.user=o})}t.$inject=["$rootScope","$mdDialog","price","dialog","profile","passSymbol","passCompany"],angular.module("app").controller("buyDialogController",t)}(),function(){"use strict";function t(t,o,e){function n(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"buyDialogController",controllerAs:"buyDialog",templateUrl:"app/components/dialog/buyDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function r(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"sellDialogController",controllerAs:"sellDialog",templateUrl:"app/components/dialog/sellDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function a(t,e,n,r){o.show(o.simple().textContent("You "+t+" "+e+" "+n+" shares for $"+r).position("bottom right").hideDelay(5e3).toastClass("bs-toast"))}function l(){t.hide()}function i(t,o,n){e(function(){t=o},n||500)}return{showBuy:n,showSell:r,closeDialog:l,showToast:a,loading:i}}t.$inject=["$mdDialog","$mdToast","$timeout"],angular.module("app").factory("dialog",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(o,n){var r=i.user.stock.quantity-n,l=(i.stockPrice-i.userStockPrice)*n;e.sellStock(i.symbol,a,o,n,l,r,function(e,r){e?(i.loading=!1,i.error=e):(i.closeDialog(),i.showToast("sold",n,i.symbol,(o*n).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")),t.$broadcast("transaction"))})}var i=this;i.symbol=r,i.loading=!1,i.closeDialog=n.closeDialog,i.showToast=n.showToast,i.sellStock=l,o.getPrice(i.symbol,null,function(t,o){t?i.error=t:i.stockPrice=o.price}),e.getStockAndFunds(i.symbol,function(t,o){t?i.error=t:(i.user=o,i.stockQuantity=i.user.stock.quantity,i.userStockPrice=i.user.stock.price)})}t.$inject=["$rootScope","price","profile","dialog","passSymbol","passCompany"],angular.module("app").controller("sellDialogController",t)}(),function(){"use strict";function t(){function t(t){return t.forEach(function(t){t.avatar=o(t.company)}),t}function o(t){var o=t.split(" ",2),e="";return o.forEach(function(t){"Inc."!==t&&(e+=t[0])}),e.toUpperCase()}return{setAvatar:t,initials:o}}angular.module("avatar",[]).factory("avatar",t)}(),function(){"use strict";function t(t){return{restrict:"A",link:function(o,e,n){e.addClass("ng-hide"),t(function(){e.removeClass("ng-hide")},n.showWithDelay||2e3)}}}t.$inject=["$timeout"],angular.module("app").directive("showWithDelay",t)}(),function(){"use strict";function t(t){function o(o,e,n){null!==e?t.get("/api/price/"+o+"/"+e).then(function(t){return n(null,t.data.price)},function(t){return n("Error: "+t.data.error,null)}):t.get("/api/price/"+o).then(function(t){return n(null,t.data.price)},function(t){return n("Error: status "+t.status,null)})}function e(o,e){t.post("/api/price/multiple",o).then(function(t){return e(null,t.data.prices)},function(t){return e("Error: status "+t.status,null)})}return{getPrice:o,getPrices:e}}t.$inject=["$http"],angular.module("price",[]).factory("price",t)}(),function(){"use strict";function t(t,o){var e=this;e.profile=o.getProfile(),o.getFunds(function(t,o){t?e.error=t:e.funds=o})}t.$inject=["$http","profile"],angular.module("app").controller("profileController",t)}(),function(){"use strict";function t(t){function o(){var t=JSON.parse(window.localStorage.getItem("profile"));return~t.name.indexOf("@")&&(t.name=t.name.split("@")[0]),t}function e(o){t.get("/api/user/").then(function(t){o(t.data.user)})}function n(o){t.get("/api/user/funds/").then(function(t){o(null,t.data.funds)},function(t){o("Error: Cannot get funds!"+t,null)})}function r(o,e){t.get("/api/user/portfolio/"+o).then(function(t){var o={stock:t.data.stock,funds:t.data.funds};e(null,o)},function(t){e("Error: status"+t.status,null,null)})}function a(o,e,n,r,a,l,i,s){var c={symbol:o,company:e,price:n,buyPrice:r,quantity:a,funds:l.toFixed(3),exists:i};t.post("/api/user/buy",c).then(function(t){s(null,t)},function(t){s(t,null)})}function l(o,e,n,r,a,l,i){var s={symbol:o,company:e,sellPrice:n,quantity:r,profit:a,sellAll:l};t.post("api/user/sell",s).then(function(t){i(null,t)},function(t){console.log(t),i(t,null)})}function i(t,o,e,n){return((t*e+o*n)/(e+n)).toFixed(3)}return{getUser:e,getStockAndFunds:r,getProfile:o,getFunds:n,buyStock:a,sellStock:l,weightedAverage:i}}t.$inject=["$http"],angular.module("profile",[]).factory("profile",t)}(),function(){"use strict";function t(t,o){function e(o){return t.get("/api/data/symbols/"+o).then(function(t){var o=[];return t.data.data.forEach(function(t){o.push(t.symbol)}),o})}function n(t){if(!t)return!1;o.transitionTo("stock",{symbol:t})}var r=this;r.queryStock=e,r.getData=n}t.$inject=["$http","$state"],angular.module("app").controller("searchController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/search/search.template.html",controller:"searchController",controllerAs:"search"}}angular.module("app").directive("search",t)}(),function(){"use strict";function t(t,o,e){function n(t){e.getNews(t,function(t,o){t?r.error=t:console.log(o)})}var r=this;r.getNews=n,"news"===t.current.name?function(){e.getRandomNews(function(t,o){t?r.error=t:(r.news=[],o.data.news.forEach(function(t){if(t.news.length>1)for(var o=0;o<t.news.length;o++)r.news.push(t.news[o])}),e.shuffleNews(r.news))})}():n(o.symbol)}t.$inject=["$state","$stateParams","news"],angular.module("app").controller("newsController",t)}(),function(){"use strict";function t(t){function o(o,e){t.get("/api/news/symbol/"+o).then(function(t){e(null,t)},function(t){e(t,null)})}function e(o){t.get("/api/news/random").then(function(t){o(null,t)},function(t){o(t,null)})}function n(t){for(var o,e,n=t.length;n;)e=Math.floor(Math.random()*n--),o=t[n],t[n]=t[e],t[e]=o;return t}return{getNews:o,getRandomNews:e,shuffleNews:n}}t.$inject=["$http"],angular.module("news",[]).factory("news",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l,i,s){function c(){s.getFunds(function(t,o){t&&(f.error=t),f.funds=o})}function u(){t.get("http://localhost:3000/api/news/AAPL",{skipAuthorization:!0}).then(function(t){f.message=t.data.news.symbol})}function p(){a.signout(),l.remove("profile"),l.remove("token"),f.sidenavShow=!1,document.body.classList.remove("logged-in"),o.$broadcast("userLogOut"),f.userLogged=!1,r.path("/welcome")}var f=this;f.getNews=u,f.logout=p,f.closeSidenav=i.closeSidenav,f.auth=a,f.message="",f.sidenavShow=!1,f.auth.isAuthenticated&&(f.profile=s.getProfile(),f.sidenavShow=!0,c()),e.$on("userLogIn",function(){f.profile=s.getProfile(),f.sidenavShow=!0,c()}),e.$on("transaction",function(){c()})}t.$inject=["$http","$rootScope","$scope","$timeout","$location","auth","store","sidenav","profile"],angular.module("app").controller("sidenavController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/sidenav/sidenav.template.html",controller:"sidenavController",controllerAs:"sidenav"}}angular.module("app").directive("sidenav",t)}(),function(){"use strict";function t(t,o,e){function n(o){t(o||"left").toggle()}function r(o){t(o||"left").close()}return{toggleSidenav:n,closeSidenav:r}}t.$inject=["$mdSidenav","auth","store"],angular.module("sidenav",[]).factory("sidenav",t)}(),function(){"use strict";function t(t,o,e){function n(e){r.loading=!0,r.markets.includes(e)?t.get("/api/risefall/"+e).then(function(t){t.data.error?r.error=t.data.error:(r.error=null,r.stocks=t.data.stocks.stocks,o.setAvatar(r.stocks),r.loading=!1,!1===t.data.stocks.newData&&(r.message="External API not available at this moment. Showing data older than 1 hour."))}):r.error="No such market: "+e}var r=this;r.markets=["US","LSE","EURO","TMX","HKE","INDIA"],r.loading=!1,r.showSell=e.showSell,r.showBuy=e.showBuy,r.getRisersFallers=n,n("US")}t.$inject=["$http","avatar","dialog"],angular.module("app").controller("homeController",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(){e.get("/api/user/portfolio").then(function(t){t.data.message?c.noPortfolio=t.data.message:(c.portfolio=t.data.portfolio,c.funds=t.data.funds,i(c.portfolio),a.setAvatar(c.portfolio))})}function i(t){var o=[];t.forEach(function(t){o.push(t.symbol)}),n.getPrices(o,function(t,o){t?c.error=t:s(c.portfolio,o)})}function s(t,o){return t.forEach(function(t){o.forEach(function(o){o.symbol===t.symbol&&(t.updatedAt=o.updatedAt,t.currPrice=o.price,t.market=o.market)})}),t}var c=this;c.showSell=r.showSell,c.showBuy=r.showBuy,c.getPortfolio=l,c.portfolio=null,t.$on("transaction",function(){l()});var u;t.$on("$destroy",function(){o.cancel(u),u=void 0}),l(),function(){u=o(function(){i(c.portfolio),console.log("Update of portfolio prices")},3e5,10)}()}t.$inject=["$scope","$interval","$http","price","dialog","avatar"],angular.module("app").controller("portfolioController",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l,i){var s=this;s.loading=!1,s.showBuy=r.showBuy,s.showSell=r.showSell;var c;o.$on("$destroy",function(){t.cancel(c),c=void 0}),function(){s.loading=!0,n.get("/api/data/symbol/"+e.symbol+"/"+e.market).then(function(t){t.data.error?(s.noCompany=t.data.error,s.loading=!1):(s.company=t.data.data,!1===s.company.newData&&(s.oldData="External API not available at this moment. Showing symbol data older than 1 day."),a.getPrice(e.symbol,e.market||s.company.market,function(t,o){t?s.error=t:(s.price=o.price,s.updatedAt=o.updatedAt)}),l.getNews(e.symbol,function(t,o){if(t)s.newsError="Error getting news";else try{s.news=o.data.news.news}catch(t){s.newsError=t}s.loading=!1}),s.avatar=i.initials(s.company.company||e.symbol))})}(),function(){c=t(function(){a.getPrice(e.symbol,e.market||s.company.market,function(t,o){t?s.error=t:(s.price=o,console.log("Price updated for "+e.symbol+" / "+e.market||s.company.market))})},3e5,10)}()}t.$inject=["$interval","$scope","$stateParams","$http","dialog","price","news","avatar"],angular.module("app").controller("stockController",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(){t.signin({authParams:{scope:"openid email"}},function(t,n){o.set("profile",t),o.set("token",n),e.path("/welcome"),document.body.classList.add("logged-in"),s(function(t){c.message=t.data.message,c.funds=t.data.user.funds,c.userLogged=!0,r.$broadcast("userLogIn")})},function(t){console.log(t)})}function s(t){a.get("api/user/").then(function(o){t(o)})}var c=this;c.login=i,c.auth=t,c.toggleSidenav=l.toggleSidenav,c.userLogged=!1,t.isAuthenticated&&(c.userLogged=!0),n.$on("userLogOut",function(){c.userLogged=!1}),n.$on("userLogIn",function(){c.userLogged=!0}),c.features=["$100,000 starting funds","Real-time stock prices","Six international stock markets","Stock risers and fallers","Daily news for market companies","Up-to-date company data","User-friendly interface"]}t.$inject=["auth","store","$location","$scope","$rootScope","$http","sidenav"],angular.module("app").controller("toolbarController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/toolbar/toolbar.template.html",controller:"toolbarController",controllerAs:"toolbar"}}angular.module("app").directive("toolbar",t)}(),function(){"use strict";function t(t,o){var e=this;!function(){t.get("/api/transaction/all").then(function(t){t.data.error?e.noTransactions=t.data.error:(e.transactions=t.data.transactions,o.setAvatar(e.transactions))},function(t){e.error=t})}()}t.$inject=["$http","avatar"],angular.module("app").controller("transactionsController",t)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
