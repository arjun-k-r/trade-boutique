!function(){"use strict";angular.module("app",["auth0","angular-storage","angular-jwt","ngMaterial","ui.router","ngLetterAvatar","sidenav","profile","price","news","avatar"])}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(t,o,e,n,r){var a;return e(function(){a=o.get("auth")}),{responseError:function(o){return 401===o.status&&(a.signout(),n.remove("profile"),n.remove("token"),r.path("/welcome")),t.reject(o)}}}i.$inject=["$q","$injector","$timeout","store","$location"],e.init({domain:"danielnitu.eu.auth0.com",clientID:"1gLOvetcrjC9GW2kEeRzEtJRJH700ia6"}),n.otherwise("/welcome"),r.state("welcome",{url:"/welcome",templateUrl:"app/components/welcome/welcome.template.html",controller:"toolbarController as toolbar"}).state("home",{url:"/home",templateUrl:"app/components/home/home.template.html",controller:"homeController as home"}).state("profile",{url:"/profile",templateUrl:"app/components/profile/profile.template.html",controller:"profileController as profile"}).state("portfolio",{url:"/portfolio",templateUrl:"app/components/portfolio/portfolio.template.html",controller:"portfolioController as portfolio"}).state("stock",{url:"/stock/:symbol/:market",templateUrl:"app/components/stock/stock.template.html",controller:"stockController as stock"}).state("news",{url:"/news/:symbol",templateUrl:"app/components/news/news.template.html",controller:"newsController as news"}).state("transactions",{url:"/transactions",templateUrl:"app/components/transactions/transactions.template.html",controller:"transactionsController as transactions"}),l.config({tokenGetter:["options",function(t){return".html"===t.url.substr(t.url.length-5)?null:window.localStorage.getItem("token").slice(1,-1)}],whiteListedDomains:["trade.boutique","localhost","jsonplaceholder.typicode.com"]}),t.theme("default").primaryPalette("blue").accentPalette("grey").warnPalette("red"),t.theme("dark-blue").backgroundPalette("blue").dark(),o.factory("redirect",i),a.interceptors.push("jwtInterceptor"),a.interceptors.push("redirect")}t.$inject=["$mdThemingProvider","$provide","authProvider","$urlRouterProvider","$stateProvider","$httpProvider","jwtOptionsProvider"],angular.module("app").config(t)}(),function(){"use strict";function t(t,o,e,n,r,a){t.$on("$locationChangeStart",function(){var t=n.get("token");t&&(r.isTokenExpired(t)||e.isAuthenticated||(document.body.classList.add("logged-in"),e.authenticate(n.get("profile"),t))),e.isAuthenticated||a.path("/welcome")})}t.$inject=["$rootScope","$state","auth","store","jwtHelper","$location"],angular.module("app").run(t)}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(o,e){n.loading(s.loading,!0),s.buyQuantity=e,s.buyPrice=(e*o).toFixed(2);var a=s.user.stock.quantity,l=r.weightedAverage(s.user.stock.price,o,a,e),i=s.user.stock.quantity+e,c=s.user.funds-(o*e).toFixed(2);r.buyStock(s.symbol,s.company,l,o,i,c,a,function(o,e){n.loading(s.loading,!1),t.$broadcast("transaction"),o?s.error=o:(s.closeDialog(),s.showToast("bought",s.buyQuantity,s.symbol,s.buyPrice.replace(/(\d)(?=(\d{3})+\.)/g,"$1,")))})}var s=this;s.stockQuantity=1,s.buyQuantity=0,s.buyPrice=0,s.symbol=a,s.company=l,s.loading=!1,s.closeDialog=n.closeDialog,s.showToast=n.showToast,s.buyStock=i,e.getPrice(s.symbol,null,function(t,o){t?s.error=t:s.stockPrice=o.price}),r.getStockAndFunds(s.symbol,function(t,o){t?s.error=t:s.user=o})}t.$inject=["$rootScope","$mdDialog","price","dialog","profile","passSymbol","passCompany"],angular.module("app").controller("buyDialogController",t)}(),function(){"use strict";function t(t,o,e){function n(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"buyDialogController",controllerAs:"buyDialog",templateUrl:"app/components/dialog/buyDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function r(o,e,n){t.show({locals:{passSymbol:e,passCompany:n},controller:"sellDialogController",controllerAs:"sellDialog",templateUrl:"app/components/dialog/sellDialog.template.html",parent:angular.element(document.body),targetEvent:o,clickOutsideToClose:!0,focusOnOpen:!1})}function a(t,e,n,r){o.show(o.simple().textContent("You "+t+" "+e+" "+n+" shares for $"+r).position("bottom right").hideDelay(5e3).toastClass("bs-toast"))}function l(){t.hide()}function i(t,o,n){e(function(){t=o},n||500)}return{showBuy:n,showSell:r,closeDialog:l,showToast:a,loading:i}}t.$inject=["$mdDialog","$mdToast","$timeout"],angular.module("app").factory("dialog",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(o,n){var r=i.user.stock.quantity-n,l=(i.stockPrice-i.userStockPrice)*n;e.sellStock(i.symbol,a,o,n,l,r,function(e,r){e?(i.loading=!1,i.error=e):(i.closeDialog(),i.showToast("sold",n,i.symbol,(o*n).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")),t.$broadcast("transaction"))})}var i=this;i.symbol=r,i.loading=!1,i.closeDialog=n.closeDialog,i.showToast=n.showToast,i.sellStock=l,o.getPrice(i.symbol,null,function(t,o){t?i.error=t:i.stockPrice=o.price}),e.getStockAndFunds(i.symbol,function(t,o){t?i.error=t:(i.user=o,i.stockQuantity=i.user.stock.quantity,i.userStockPrice=i.user.stock.price)})}t.$inject=["$rootScope","price","profile","dialog","passSymbol","passCompany"],angular.module("app").controller("sellDialogController",t)}(),function(){"use strict";function t(){function t(t){return t.forEach(function(t){t.avatar=o(t.company)}),t}function o(t){var o=t.split(" ",2),e="";return o.forEach(function(t){"Inc."!==t&&(e+=t[0])}),e.toUpperCase()}return{setAvatar:t,initials:o}}angular.module("avatar",[]).factory("avatar",t)}(),function(){"use strict";function t(t){return{restrict:"A",link:function(o,e,n){e.addClass("ng-hide"),t(function(){e.removeClass("ng-hide")},n.showWithDelay||2e3)}}}t.$inject=["$timeout"],angular.module("app").directive("showWithDelay",t)}(),function(){"use strict";function t(t){function o(o,e,n){null!==e?t.get("/api/price/"+o+"/"+e).then(function(t){return n(null,t.data.price)},function(t){return n("Error: "+t.data.error,null)}):t.get("/api/price/"+o).then(function(t){return n(null,t.data.price)},function(t){return n("Error: status "+t.status,null)})}function e(o,e){t.post("/api/price/multiple",o).then(function(t){return e(null,t.data.prices)},function(t){return e("Error: status "+t.status,null)})}return{getPrice:o,getPrices:e}}t.$inject=["$http"],angular.module("price",[]).factory("price",t)}(),function(){"use strict";function t(t,o,e){function n(e){r.loading=!0,r.markets.includes(e)?t.get("/api/risefall/"+e).then(function(t){t.data.error?r.error=t.data.error:(r.error=null,r.stocks=t.data.stocks.stocks,o.setAvatar(r.stocks),r.loading=!1,!1===t.data.stocks.newData&&(r.message="External API not available at this moment. Showing data older than 1 hour."))}):r.error="No such market: "+e}var r=this;r.markets=["US","LSE","EURO","TMX","HKE","INDIA"],r.loading=!1,r.showSell=e.showSell,r.showBuy=e.showBuy,r.getRisersFallers=n,n("US")}t.$inject=["$http","avatar","dialog"],angular.module("app").controller("homeController",t)}(),function(){"use strict";function t(t,o,e){function n(t){e.getNews(t,function(t,o){t?r.error=t:console.log(o)})}var r=this;r.getNews=n,"news"===t.current.name?function(){e.getRandomNews(function(t,o){t?r.error=t:(r.news=[],o.data.news.forEach(function(t){if(t.news.length>1)for(var o=0;o<t.news.length;o++)r.news.push(t.news[o])}),e.shuffleNews(r.news))})}():n(o.symbol)}t.$inject=["$state","$stateParams","news"],angular.module("app").controller("newsController",t)}(),function(){"use strict";function t(t){function o(o,e){t.get("/api/news/symbol/"+o).then(function(t){e(null,t)},function(t){e(t,null)})}function e(o){t.get("/api/news/random").then(function(t){o(null,t)},function(t){o(t,null)})}function n(t){for(var o,e,n=t.length;n;)e=Math.floor(Math.random()*n--),o=t[n],t[n]=t[e],t[e]=o;return t}return{getNews:o,getRandomNews:e,shuffleNews:n}}t.$inject=["$http"],angular.module("news",[]).factory("news",t)}(),function(){"use strict";function t(t,o){var e=this;e.profile=o.getProfile(),o.getFunds(function(t,o){t?e.error=t:e.funds=o})}t.$inject=["$http","profile"],angular.module("app").controller("profileController",t)}(),function(){"use strict";function t(t){function o(){var t=JSON.parse(window.localStorage.getItem("profile"));return~t.name.indexOf("@")&&(t.name=t.name.split("@")[0]),t}function e(o){t.get("/api/user/").then(function(t){o(t.data.user)})}function n(o){t.get("/api/user/funds/").then(function(t){o(null,t.data.funds)},function(t){o("Error: Cannot get funds!"+t,null)})}function r(o,e){t.get("/api/user/portfolio/"+o).then(function(t){var o={stock:t.data.stock,funds:t.data.funds};e(null,o)},function(t){e("Error: status"+t.status,null,null)})}function a(o,e,n,r,a,l,i,s){var c={symbol:o,company:e,price:n,buyPrice:r,quantity:a,funds:l.toFixed(3),exists:i};t.post("/api/user/buy",c).then(function(t){s(null,t)},function(t){s(t,null)})}function l(o,e,n,r,a,l,i){var s={symbol:o,company:e,sellPrice:n,quantity:r,profit:a,sellAll:l};t.post("api/user/sell",s).then(function(t){i(null,t)},function(t){console.log(t),i(t,null)})}function i(t,o,e,n){return((t*e+o*n)/(e+n)).toFixed(3)}return{getUser:e,getStockAndFunds:r,getProfile:o,getFunds:n,buyStock:a,sellStock:l,weightedAverage:i}}t.$inject=["$http"],angular.module("profile",[]).factory("profile",t)}(),function(){"use strict";function t(t,o,e,n,r,a){function l(){e.get("/api/user/portfolio").then(function(t){t.data.message?c.noPortfolio=t.data.message:(c.portfolio=t.data.portfolio,c.funds=t.data.funds,i(c.portfolio),a.setAvatar(c.portfolio))})}function i(t){var o=[];t.forEach(function(t){o.push(t.symbol)}),n.getPrices(o,function(t,o){t?c.error=t:s(c.portfolio,o)})}function s(t,o){return t.forEach(function(t){o.forEach(function(o){o.symbol===t.symbol&&(t.updatedAt=o.updatedAt,t.currPrice=o.price,t.market=o.market)})}),t}var c=this;c.showSell=r.showSell,c.showBuy=r.showBuy,c.getPortfolio=l,c.portfolio=null,t.$on("transaction",function(){l()});var u;t.$on("$destroy",function(){o.cancel(u),u=void 0}),l(),function(){u=o(function(){i(c.portfolio),console.log("Update of portfolio prices")},3e5,10)}()}t.$inject=["$scope","$interval","$http","price","dialog","avatar"],angular.module("app").controller("portfolioController",t)}(),function(){"use strict";function t(t,o){function e(o){return t.get("/api/data/symbols/"+o).then(function(t){var o=[];return t.data.data.forEach(function(t){o.push(t.symbol)}),o})}function n(t){if(!t)return!1;o.transitionTo("stock",{symbol:t})}var r=this;r.queryStock=e,r.getData=n}t.$inject=["$http","$state"],angular.module("app").controller("searchController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/search/search.template.html",controller:"searchController",controllerAs:"search"}}angular.module("app").directive("search",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l,i){function s(){i.getFunds(function(t,o){t&&(p.error=t),p.funds=o})}function c(){t.get("http://localhost:3000/api/news/AAPL",{skipAuthorization:!0}).then(function(t){p.message=t.data.news.symbol})}function u(){r.signout(),a.remove("profile"),a.remove("token"),p.sidenavShow=!1,document.body.classList.remove("logged-in"),o.$broadcast("userLogOut"),p.userLogged=!1,n.path("/welcome")}var p=this;p.getNews=c,p.logout=u,p.closeSidenav=l.closeSidenav,p.auth=r,p.message="",p.sidenavShow=!1,p.auth.isAuthenticated&&(p.profile=i.getProfile(),p.sidenavShow=!0,s()),e.$on("userLogIn",function(){p.profile=i.getProfile(),p.sidenavShow=!0,s()}),e.$on("transaction",function(){s()})}t.$inject=["$http","$rootScope","$scope","$location","auth","store","sidenav","profile"],angular.module("app").controller("sidenavController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/sidenav/sidenav.template.html",controller:"sidenavController",controllerAs:"sidenav"}}angular.module("app").directive("sidenav",t)}(),function(){"use strict";function t(t,o,e){function n(o){t(o||"left").toggle()}function r(o){t(o||"left").close()}return{toggleSidenav:n,closeSidenav:r}}t.$inject=["$mdSidenav","auth","store"],angular.module("sidenav",[]).factory("sidenav",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l,i){var s=this;s.loading=!1,s.showBuy=r.showBuy,s.showSell=r.showSell;var c;o.$on("$destroy",function(){t.cancel(c),c=void 0}),function(){s.loading=!0,n.get("/api/data/symbol/"+e.symbol+"/"+e.market).then(function(t){t.data.error?(s.noCompany=t.data.error,s.loading=!1):(s.company=t.data.data,!1===s.company.newData&&(s.oldData="External API not available at this moment. Showing symbol data older than 1 day."),a.getPrice(e.symbol,e.market||s.company.market,function(t,o){t?s.error=t:(s.price=o.price,s.updatedAt=o.updatedAt)}),l.getNews(e.symbol,function(t,o){if(t)s.newsError="Error getting news";else try{s.news=o.data.news.news}catch(t){s.newsError=t}s.loading=!1}),s.avatar=i.initials(s.company.company||e.symbol))})}(),function(){c=t(function(){a.getPrice(e.symbol,e.market||s.company.market,function(t,o){t?s.error=t:(s.price=o,console.log("Price updated for "+e.symbol+" / "+e.market||s.company.market))})},3e5,10)}()}t.$inject=["$interval","$scope","$stateParams","$http","dialog","price","news","avatar"],angular.module("app").controller("stockController",t)}(),function(){"use strict";function t(t,o,e,n,r,a,l){function i(){t.signin({authParams:{scope:"openid email"}},function(t,n){o.set("profile",t),o.set("token",n),e.path("/welcome"),document.body.classList.add("logged-in"),c.userLogged=!0,s(function(t){c.message=t.data.message,c.funds=t.data.user.funds,r.$broadcast("userLogIn")})},function(t){console.log(t)})}function s(t){a.get("api/user/").then(function(o){t(o)})}var c=this;c.login=i,c.auth=t,c.toggleSidenav=l.toggleSidenav,c.userLogged=!1,t.isAuthenticated&&(c.userLogged=!0),n.$on("userLogOut",function(){c.userLogged=!1}),n.$on("userLogIn",function(){c.userLogged=!0}),c.features=["$100,000 starting funds","Real-time stock prices","Six international stock markets","Stock risers and fallers","Daily news for market companies","Up-to-date company data","User-friendly interface"]}t.$inject=["auth","store","$location","$scope","$rootScope","$http","sidenav"],angular.module("app").controller("toolbarController",t)}(),function(){"use strict";function t(){return{templateUrl:"app/components/toolbar/toolbar.template.html",controller:"toolbarController",controllerAs:"toolbar"}}angular.module("app").directive("toolbar",t)}(),function(){"use strict";function t(t,o){var e=this;!function(){t.get("/api/transaction/all").then(function(t){t.data.error?e.noTransactions=t.data.error:(e.transactions=t.data.transactions,o.setAvatar(e.transactions))},function(t){e.error=t})}()}t.$inject=["$http","avatar"],angular.module("app").controller("transactionsController",t)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFwcC5jb25maWcuanMiLCJhcHAucnVuLmpzIiwiZGlhbG9nL2J1eURpYWxvZy5jb250cm9sbGVyLmpzIiwiZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLmpzIiwiZGlhbG9nL3NlbGxEaWFsb2cuY29udHJvbGxlci5qcyIsImhlbHBlcnMvYXZhdGFyLnNlcnZpY2UuanMiLCJoZWxwZXJzL2RlbGF5LmRpcmVjdGl2ZS5qcyIsImhlbHBlcnMvcHJpY2Uuc2VydmljZS5qcyIsImhvbWUvaG9tZS5jb250cm9sbGVyLmpzIiwibmV3cy9uZXdzLmNvbnRyb2xsZXIuanMiLCJuZXdzL25ld3Muc2VydmljZS5qcyIsInByb2ZpbGUvcHJvZmlsZS5jb250cm9sbGVyLmpzIiwicHJvZmlsZS9wcm9maWxlLnNlcnZpY2UuanMiLCJwb3J0Zm9saW8vcG9ydGZvbGlvLmNvbnRyb2xsZXIuanMiLCJzZWFyY2gvc2VhcmNoLmNvbnRyb2xsZXIuanMiLCJzZWFyY2gvc2VhcmNoLmRpcmVjdGl2ZS5qcyIsInNpZGVuYXYvc2lkZW5hdi5jb250cm9sbGVyLmpzIiwic2lkZW5hdi9zaWRlbmF2LmRpcmVjdGl2ZS5qcyIsInNpZGVuYXYvc2lkZW5hdi5zZXJ2aWNlLmpzIiwic3RvY2svc3RvY2suY29udHJvbGxlci5qcyIsInRvb2xiYXIvdG9vbGJhci5jb250cm9sbGVyLmpzIiwidG9vbGJhci90b29sYmFyLmRpcmVjdGl2ZS5qcyIsInRyYW5zYWN0aW9ucy90cmFuc2FjdGlvbnMuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiJHByb3ZpZGUiLCJhdXRoUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJyZWRpcmVjdCIsIiRxIiwiJGluamVjdG9yIiwiJHRpbWVvdXQiLCJzdG9yZSIsIiRsb2NhdGlvbiIsImF1dGgiLCJnZXQiLCJyZXNwb25zZUVycm9yIiwicmVqZWN0aW9uIiwic3RhdHVzIiwic2lnbm91dCIsInJlbW92ZSIsInBhdGgiLCJyZWplY3QiLCJpbml0IiwiZG9tYWluIiwiY2xpZW50SUQiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImp3dE9wdGlvbnNQcm92aWRlciIsInRva2VuR2V0dGVyIiwib3B0aW9ucyIsInN1YnN0ciIsImxlbmd0aCIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzbGljZSIsIndoaXRlTGlzdGVkRG9tYWlucyIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwid2FyblBhbGV0dGUiLCJiYWNrZ3JvdW5kUGFsZXR0ZSIsImRhcmsiLCJmYWN0b3J5IiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsInJ1biIsIiRyb290U2NvcGUiLCIkc3RhdGUiLCJqd3RIZWxwZXIiLCIkb24iLCJ0b2tlbiIsImlzVG9rZW5FeHBpcmVkIiwiaXNBdXRoZW50aWNhdGVkIiwiZG9jdW1lbnQiLCJib2R5IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXV0aGVudGljYXRlIiwiYnV5RGlhbG9nQ29udHJvbGxlciIsIiRtZERpYWxvZyIsInByaWNlIiwiZGlhbG9nIiwicHJvZmlsZSIsInBhc3NTeW1ib2wiLCJwYXNzQ29tcGFueSIsImJ1eVN0b2NrIiwicXVhbnRpdHkiLCJsb2FkaW5nIiwidm0iLCJidXlRdWFudGl0eSIsImJ1eVByaWNlIiwidG9GaXhlZCIsImN1cnJRdHkiLCJ1c2VyIiwic3RvY2siLCJhdmdQcmljZSIsIndlaWdodGVkQXZlcmFnZSIsInRvdGFsUXR5IiwiZnVuZHMiLCJzeW1ib2wiLCJjb21wYW55IiwiZXJyIiwicmVzIiwiJGJyb2FkY2FzdCIsImVycm9yIiwiY2xvc2VEaWFsb2ciLCJzaG93VG9hc3QiLCJyZXBsYWNlIiwidGhpcyIsInN0b2NrUXVhbnRpdHkiLCJnZXRQcmljZSIsInN0b2NrUHJpY2UiLCJnZXRTdG9ja0FuZEZ1bmRzIiwiZGF0YSIsIiRtZFRvYXN0Iiwic2hvd0J1eSIsIiRldmVudCIsInNob3ciLCJsb2NhbHMiLCJjb250cm9sbGVyQXMiLCJwYXJlbnQiLCJlbGVtZW50IiwidGFyZ2V0RXZlbnQiLCJjbGlja091dHNpZGVUb0Nsb3NlIiwiZm9jdXNPbk9wZW4iLCJzaG93U2VsbCIsImFjdGlvbiIsInNpbXBsZSIsInRleHRDb250ZW50IiwicG9zaXRpb24iLCJoaWRlRGVsYXkiLCJ0b2FzdENsYXNzIiwiaGlkZSIsInZhbHVlIiwidGltZW91dCIsInNlbGxEaWFsb2dDb250cm9sbGVyIiwic2VsbFN0b2NrIiwic2VsbEFsbCIsInByb2ZpdCIsInVzZXJTdG9ja1ByaWNlIiwiYXZhdGFyIiwic2V0QXZhdGFyIiwic3RvY2tBcnJheSIsImZvckVhY2giLCJpbml0aWFscyIsIm5hbWUiLCJzcGxpdCIsIml0ZW0iLCJ0b1VwcGVyQ2FzZSIsInNob3dXaXRoRGVsYXkiLCJyZXN0cmljdCIsImxpbmsiLCIkc2NvcGUiLCIkZWxlbWVudCIsImF0dHJzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImRpcmVjdGl2ZSIsIiRodHRwIiwibWFya2V0IiwiY2IiLCJ0aGVuIiwiZ2V0UHJpY2VzIiwic3ltYm9scyIsInBvc3QiLCJwcmljZXMiLCJob21lQ29udHJvbGxlciIsImdldFJpc2Vyc0ZhbGxlcnMiLCJpbmNsdWRlcyIsInN0b2NrcyIsIm5ld0RhdGEiLCJtZXNzYWdlIiwibWFya2V0cyIsIm5ld3NDb250cm9sbGVyIiwiJHN0YXRlUGFyYW1zIiwibmV3cyIsImdldE5ld3MiLCJjb25zb2xlIiwibG9nIiwiY3VycmVudCIsImdldFJhbmRvbU5ld3MiLCJpIiwic2h1ZmZsZU5ld3MiLCJhcnJheSIsInQiLCJtIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicHJvZmlsZUNvbnRyb2xsZXIiLCJnZXRQcm9maWxlIiwiZ2V0RnVuZHMiLCJ1c2VyUHJvZmlsZSIsIkpTT04iLCJwYXJzZSIsImluZGV4T2YiLCJnZXRVc2VyIiwiZXhpc3RzIiwic2VsbFByaWNlIiwicHJldlByaWNlIiwiY3VyclByaWNlIiwicHJldlF0eSIsInBvcnRmb2xpb0NvbnRyb2xsZXIiLCIkaW50ZXJ2YWwiLCJnZXRQb3J0Zm9saW8iLCJub1BvcnRmb2xpbyIsInBvcnRmb2xpbyIsIm1hdGNoUHJpY2VzIiwidXNlclBvcnRmb2xpbyIsImN1cnJQcmljZXMiLCJ1c2VyU3RvY2siLCJ1cGRhdGVkQXQiLCJ1cGRhdGVQcmljZSIsImNhbmNlbCIsInVuZGVmaW5lZCIsInNlYXJjaENvbnRyb2xsZXIiLCJxdWVyeVN0b2NrIiwicmVzdWx0cyIsImdldERhdGEiLCJ0cmFuc2l0aW9uVG8iLCJzZWFyY2giLCJzaWRlbmF2Q29udHJvbGxlciIsInNpZGVuYXYiLCJza2lwQXV0aG9yaXphdGlvbiIsInJlc3BvbnNlIiwibG9nb3V0Iiwic2lkZW5hdlNob3ciLCJ1c2VyTG9nZ2VkIiwiY2xvc2VTaWRlbmF2IiwiJG1kU2lkZW5hdiIsInRvZ2dsZVNpZGVuYXYiLCJpZCIsInRvZ2dsZSIsImNsb3NlIiwic3RvY2tDb250cm9sbGVyIiwibm9Db21wYW55Iiwib2xkRGF0YSIsIm5ld3NFcnJvciIsInRvb2xiYXJDb250cm9sbGVyIiwibG9naW4iLCJzaWduaW4iLCJhdXRoUGFyYW1zIiwic2NvcGUiLCJzZXQiLCJ1c2VyQWNjb3VudCIsImZlYXR1cmVzIiwidG9vbGJhciIsInRyYW5zYWN0aW9uc0NvbnRyb2xsZXIiLCJub1RyYW5zYWN0aW9ucyIsInRyYW5zYWN0aW9ucyJdLCJtYXBwaW5ncyI6IkNBR0EsV0FDQSxZQUdBQSxTQUNBQyxPQUFBLE9BQ0EsUUFBQSxrQkFBQSxjQUFBLGFBQUEsWUFBQSxpQkFDQSxVQUFBLFVBQUEsUUFBQSxPQUFBLGNDVkEsV0FDQSxZQU9BLFNBQUFDLEdBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEtBa0VBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdB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LFdBQ0FrRCxFQUNBaEksSUFBQSx3QkFDQW1JLEtBQUEsU0FBQTNELEdBQ0FBLEVBQUFXLEtBQUFULE1BQ0FoQixFQUFBZ0ssZUFBQWxKLEVBQUFXLEtBQUFULE9BRUFoQixFQUFBaUssYUFBQW5KLEVBQUFXLEtBQUF3SSxhQUNBN0csRUFBQUMsVUFBQXJELEVBQUFpSyxnQkFFQSxTQUFBcEosR0FDQWIsRUFBQWdCLE1BQUFILG9DQWxCQXZGLFFBQ0FDLE9BQUEsT0FDQThCLFdBQUEseUJBQUEwTSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuVHJhZGUgQm91dGlxdWUgIENvcHlyaWdodCAoQykgMjAxNyAgRGFuaWVsIE5pdHVcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG47KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnLCBbXG4gICAgICAnYXV0aDAnLCAnYW5ndWxhci1zdG9yYWdlJywgJ2FuZ3VsYXItand0JywgJ25nTWF0ZXJpYWwnLCAndWkucm91dGVyJywgJ25nTGV0dGVyQXZhdGFyJyxcbiAgICAgICdzaWRlbmF2JywgJ3Byb2ZpbGUnLCAncHJpY2UnLCAnbmV3cycsICdhdmF0YXInXSlcbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29uZmlnKGNvbmZpZylcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gY29uZmlnIChcbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIsXG4gICAgJHByb3ZpZGUsXG4gICAgYXV0aFByb3ZpZGVyLFxuICAgICR1cmxSb3V0ZXJQcm92aWRlcixcbiAgICAkc3RhdGVQcm92aWRlcixcbiAgICAkaHR0cFByb3ZpZGVyLFxuICAgIGp3dE9wdGlvbnNQcm92aWRlcikge1xuICAgIGF1dGhQcm92aWRlci5pbml0KHtcbiAgICAgIGRvbWFpbjogJ2RhbmllbG5pdHUuZXUuYXV0aDAuY29tJyxcbiAgICAgIGNsaWVudElEOiAnMWdMT3ZldGNyakM5R1cya0VlUnpFdEpSSkg3MDBpYTYnXG4gICAgfSlcblxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy93ZWxjb21lJylcblxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ3dlbGNvbWUnLCB7XG4gICAgICAgIHVybDogJy93ZWxjb21lJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29tcG9uZW50cy93ZWxjb21lL3dlbGNvbWUudGVtcGxhdGUuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICd0b29sYmFyQ29udHJvbGxlciBhcyB0b29sYmFyJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnaG9tZScsIHtcbiAgICAgICAgdXJsOiAnL2hvbWUnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9jb21wb25lbnRzL2hvbWUvaG9tZS50ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2hvbWVDb250cm9sbGVyIGFzIGhvbWUnXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdwcm9maWxlJywge1xuICAgICAgICB1cmw6ICcvcHJvZmlsZScsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvcHJvZmlsZS9wcm9maWxlLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAncHJvZmlsZUNvbnRyb2xsZXIgYXMgcHJvZmlsZSdcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ3BvcnRmb2xpbycsIHtcbiAgICAgICAgdXJsOiAnL3BvcnRmb2xpbycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvcG9ydGZvbGlvL3BvcnRmb2xpby50ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3BvcnRmb2xpb0NvbnRyb2xsZXIgYXMgcG9ydGZvbGlvJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnc3RvY2snLCB7XG4gICAgICAgIHVybDogJy9zdG9jay86c3ltYm9sLzptYXJrZXQnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9jb21wb25lbnRzL3N0b2NrL3N0b2NrLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnc3RvY2tDb250cm9sbGVyIGFzIHN0b2NrJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnbmV3cycsIHtcbiAgICAgICAgdXJsOiAnL25ld3MvOnN5bWJvbCcsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvbmV3cy9uZXdzLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnbmV3c0NvbnRyb2xsZXIgYXMgbmV3cydcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ3RyYW5zYWN0aW9ucycsIHtcbiAgICAgICAgdXJsOiAnL3RyYW5zYWN0aW9ucycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zL3RyYW5zYWN0aW9ucy50ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3RyYW5zYWN0aW9uc0NvbnRyb2xsZXIgYXMgdHJhbnNhY3Rpb25zJ1xuICAgICAgfSlcblxuICAgIGp3dE9wdGlvbnNQcm92aWRlci5jb25maWcoe1xuICAgICAgdG9rZW5HZXR0ZXI6IFsnb3B0aW9ucycsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vIERvbid0IHNlbmQgdGhlIHRva2VuIGZvciB0ZW1wbGF0ZSByZXF1ZXN0c1xuICAgICAgICBpZiAob3B0aW9ucy51cmwuc3Vic3RyKG9wdGlvbnMudXJsLmxlbmd0aCAtIDUpID09PSAnLmh0bWwnKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b2tlbiA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgICAgICByZXR1cm4gdG9rZW4uc2xpY2UoMSwgLTEpXG4gICAgICB9XSxcbiAgICAgIHdoaXRlTGlzdGVkRG9tYWluczogWyd0cmFkZS5ib3V0aXF1ZScsICdsb2NhbGhvc3QnLCAnanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbSddXG4gICAgfSlcblxuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXG4gICAgICAucHJpbWFyeVBhbGV0dGUoJ2JsdWUnKVxuICAgICAgLmFjY2VudFBhbGV0dGUoJ2dyZXknKVxuICAgICAgLndhcm5QYWxldHRlKCdyZWQnKVxuXG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkYXJrLWJsdWUnKS5iYWNrZ3JvdW5kUGFsZXR0ZSgnYmx1ZScpLmRhcmsoKVxuXG4gICAgZnVuY3Rpb24gcmVkaXJlY3QgKCRxLCAkaW5qZWN0b3IsICR0aW1lb3V0LCBzdG9yZSwgJGxvY2F0aW9uKSB7XG4gICAgICB2YXIgYXV0aFxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBhdXRoID0gJGluamVjdG9yLmdldCgnYXV0aCcpXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNwb25zZUVycm9yOiBmdW5jdGlvbiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKHJlamVjdGlvbi5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgYXV0aC5zaWdub3V0KClcbiAgICAgICAgICAgIHN0b3JlLnJlbW92ZSgncHJvZmlsZScpXG4gICAgICAgICAgICBzdG9yZS5yZW1vdmUoJ3Rva2VuJylcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvd2VsY29tZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICRwcm92aWRlLmZhY3RvcnkoJ3JlZGlyZWN0JywgcmVkaXJlY3QpXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnand0SW50ZXJjZXB0b3InKVxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ3JlZGlyZWN0JylcbiAgfVxufSkoKVxuIiwiOyhmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5ydW4ocnVuKVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBydW4gKCRyb290U2NvcGUsICRzdGF0ZSwgYXV0aCwgc3RvcmUsIGp3dEhlbHBlciwgJGxvY2F0aW9uKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gR2V0IHRoZSBKV1QgdGhhdCBpcyBzYXZlZCBpbiBsb2NhbCBzdG9yYWdlXG4gICAgICAvLyBhbmQgaWYgaXQgaXMgdGhlcmUsIGNoZWNrIHdoZXRoZXIgaXQgaXMgZXhwaXJlZC5cbiAgICAgIC8vIElmIGl0IGlzbid0LCBzZXQgdGhlIHVzZXIncyBhdXRoIHN0YXRlXG4gICAgICB2YXIgdG9rZW4gPSBzdG9yZS5nZXQoJ3Rva2VuJylcbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBpZiAoIWp3dEhlbHBlci5pc1Rva2VuRXhwaXJlZCh0b2tlbikpIHtcbiAgICAgICAgICBpZiAoIWF1dGguaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2xvZ2dlZC1pbicpXG4gICAgICAgICAgICBhdXRoLmF1dGhlbnRpY2F0ZShzdG9yZS5nZXQoJ3Byb2ZpbGUnKSwgdG9rZW4pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXV0aC5pc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy93ZWxjb21lJylcbiAgICAgIH1cbiAgICB9KVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ2J1eURpYWxvZ0NvbnRyb2xsZXInLCBidXlEaWFsb2dDb250cm9sbGVyKVxuXG4gIGZ1bmN0aW9uIGJ1eURpYWxvZ0NvbnRyb2xsZXIgKCRyb290U2NvcGUsICRtZERpYWxvZywgcHJpY2UsIGRpYWxvZywgcHJvZmlsZSwgcGFzc1N5bWJvbCwgcGFzc0NvbXBhbnkpIHtcbiAgICB2YXIgdm0gPSB0aGlzXG5cbiAgICB2bS5zdG9ja1F1YW50aXR5ID0gMVxuICAgIHZtLmJ1eVF1YW50aXR5ID0gMFxuICAgIHZtLmJ1eVByaWNlID0gMFxuICAgIHZtLnN5bWJvbCA9IHBhc3NTeW1ib2xcbiAgICB2bS5jb21wYW55ID0gcGFzc0NvbXBhbnlcbiAgICB2bS5sb2FkaW5nID0gZmFsc2VcblxuICAgIHZtLmNsb3NlRGlhbG9nID0gZGlhbG9nLmNsb3NlRGlhbG9nXG4gICAgdm0uc2hvd1RvYXN0ID0gZGlhbG9nLnNob3dUb2FzdFxuICAgIHZtLmJ1eVN0b2NrID0gYnV5U3RvY2tcblxuICAgIHByaWNlLmdldFByaWNlKHZtLnN5bWJvbCwgbnVsbCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5zdG9ja1ByaWNlID0gcmVzLnByaWNlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHByb2ZpbGUuZ2V0U3RvY2tBbmRGdW5kcyh2bS5zeW1ib2wsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdm0uZXJyb3IgPSBlcnJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLnVzZXIgPSBkYXRhXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGJ1eVN0b2NrIChwcmljZSwgcXVhbnRpdHkpIHtcbiAgICAgIGRpYWxvZy5sb2FkaW5nKHZtLmxvYWRpbmcsIHRydWUpXG4gICAgICB2bS5idXlRdWFudGl0eSA9IHF1YW50aXR5XG4gICAgICB2bS5idXlQcmljZSA9IChxdWFudGl0eSAqIHByaWNlKS50b0ZpeGVkKDIpXG4gICAgICB2YXIgY3VyclF0eSA9IHZtLnVzZXIuc3RvY2sucXVhbnRpdHlcbiAgICAgIHZhciBhdmdQcmljZSA9IHByb2ZpbGUud2VpZ2h0ZWRBdmVyYWdlKHZtLnVzZXIuc3RvY2sucHJpY2UsIHByaWNlLCBjdXJyUXR5LCBxdWFudGl0eSlcbiAgICAgIHZhciB0b3RhbFF0eSA9IHZtLnVzZXIuc3RvY2sucXVhbnRpdHkgKyBxdWFudGl0eVxuICAgICAgdmFyIGZ1bmRzID0gdm0udXNlci5mdW5kcyAtICgocHJpY2UgKiBxdWFudGl0eSkudG9GaXhlZCgyKSlcblxuICAgICAgcHJvZmlsZS5idXlTdG9jayh2bS5zeW1ib2wsIHZtLmNvbXBhbnksIGF2Z1ByaWNlLCBwcmljZSwgdG90YWxRdHksIGZ1bmRzLCBjdXJyUXR5LCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgZGlhbG9nLmxvYWRpbmcodm0ubG9hZGluZywgZmFsc2UpXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndHJhbnNhY3Rpb24nKVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB2bS5lcnJvciA9IGVyclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZtLmNsb3NlRGlhbG9nKClcbiAgICAgICAgICB2bS5zaG93VG9hc3QoJ2JvdWdodCcsIHZtLmJ1eVF1YW50aXR5LCB2bS5zeW1ib2wsICh2bS5idXlQcmljZS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pK1xcLikvZywgJyQxLCcpKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZmFjdG9yeSgnZGlhbG9nJywgZGlhbG9nKVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaWFsb2cgKCRtZERpYWxvZywgJG1kVG9hc3QsICR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3dCdXk6IHNob3dCdXksXG4gICAgICBzaG93U2VsbDogc2hvd1NlbGwsXG4gICAgICBjbG9zZURpYWxvZzogY2xvc2VEaWFsb2csXG4gICAgICBzaG93VG9hc3Q6IHNob3dUb2FzdCxcbiAgICAgIGxvYWRpbmc6IGxvYWRpbmdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93QnV5ICgkZXZlbnQsIHBhc3NTeW1ib2wsIHBhc3NDb21wYW55KSB7XG4gICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgIGxvY2Fsczoge3Bhc3NTeW1ib2w6IHBhc3NTeW1ib2wsIHBhc3NDb21wYW55OiBwYXNzQ29tcGFueX0sXG4gICAgICAgIGNvbnRyb2xsZXI6ICdidXlEaWFsb2dDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAnYnV5RGlhbG9nJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29tcG9uZW50cy9kaWFsb2cvYnV5RGlhbG9nLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgdGFyZ2V0RXZlbnQ6ICRldmVudCxcbiAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgZm9jdXNPbk9wZW46IGZhbHNlXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dTZWxsICgkZXZlbnQsIHBhc3NTeW1ib2wsIHBhc3NDb21wYW55KSB7XG4gICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgIGxvY2Fsczoge3Bhc3NTeW1ib2w6IHBhc3NTeW1ib2wsIHBhc3NDb21wYW55OiBwYXNzQ29tcGFueX0sXG4gICAgICAgIGNvbnRyb2xsZXI6ICdzZWxsRGlhbG9nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3NlbGxEaWFsb2cnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9jb21wb25lbnRzL2RpYWxvZy9zZWxsRGlhbG9nLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgdGFyZ2V0RXZlbnQ6ICRldmVudCxcbiAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgZm9jdXNPbk9wZW46IGZhbHNlXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dUb2FzdCAoYWN0aW9uLCBxdWFudGl0eSwgc3ltYm9sLCBwcmljZSkge1xuICAgICAgJG1kVG9hc3Quc2hvdyhcbiAgICAgICAgJG1kVG9hc3RcbiAgICAgICAgICAuc2ltcGxlKClcbiAgICAgICAgICAudGV4dENvbnRlbnQoJ1lvdSAnICsgYWN0aW9uICsgJyAnICsgcXVhbnRpdHkgKyAnICcgKyBzeW1ib2wgKyAnIHNoYXJlcyBmb3IgJCcgKyBwcmljZSlcbiAgICAgICAgICAucG9zaXRpb24oJ2JvdHRvbSByaWdodCcpXG4gICAgICAgICAgLmhpZGVEZWxheSg1MDAwKVxuICAgICAgICAgIC50b2FzdENsYXNzKCdicy10b2FzdCcpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgICRtZERpYWxvZy5oaWRlKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkaW5nIChsb2FkaW5nLCB2YWx1ZSwgdGltZW91dCkge1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2FkaW5nID0gdmFsdWVcbiAgICAgIH0sIHRpbWVvdXQgfHwgNTAwKVxuICAgIH1cbiAgfVxufSkoKVxuIiwiOyhmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdzZWxsRGlhbG9nQ29udHJvbGxlcicsIHNlbGxEaWFsb2dDb250cm9sbGVyKVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBzZWxsRGlhbG9nQ29udHJvbGxlciAoJHJvb3RTY29wZSwgcHJpY2UsIHByb2ZpbGUsIGRpYWxvZywgcGFzc1N5bWJvbCwgcGFzc0NvbXBhbnkpIHtcbiAgICB2YXIgdm0gPSB0aGlzXG5cbiAgICB2bS5zeW1ib2wgPSBwYXNzU3ltYm9sXG4gICAgdm0ubG9hZGluZyA9IGZhbHNlXG5cbiAgICB2bS5jbG9zZURpYWxvZyA9IGRpYWxvZy5jbG9zZURpYWxvZ1xuICAgIHZtLnNob3dUb2FzdCA9IGRpYWxvZy5zaG93VG9hc3RcbiAgICB2bS5zZWxsU3RvY2sgPSBzZWxsU3RvY2tcblxuICAgIHByaWNlLmdldFByaWNlKHZtLnN5bWJvbCwgbnVsbCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5zdG9ja1ByaWNlID0gcmVzLnByaWNlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHByb2ZpbGUuZ2V0U3RvY2tBbmRGdW5kcyh2bS5zeW1ib2wsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdm0uZXJyb3IgPSBlcnJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLnVzZXIgPSBkYXRhXG4gICAgICAgIHZtLnN0b2NrUXVhbnRpdHkgPSB2bS51c2VyLnN0b2NrLnF1YW50aXR5XG4gICAgICAgIHZtLnVzZXJTdG9ja1ByaWNlID0gdm0udXNlci5zdG9jay5wcmljZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBzZWxsU3RvY2sgKHByaWNlLCBxdWFudGl0eSkge1xuICAgICAgdmFyIHNlbGxBbGwgPSB2bS51c2VyLnN0b2NrLnF1YW50aXR5IC0gcXVhbnRpdHlcbiAgICAgIHZhciBwcm9maXQgPSAodm0uc3RvY2tQcmljZSAtIHZtLnVzZXJTdG9ja1ByaWNlKSAqIHF1YW50aXR5XG5cbiAgICAgIHByb2ZpbGUuc2VsbFN0b2NrKHZtLnN5bWJvbCwgcGFzc0NvbXBhbnksIHByaWNlLCBxdWFudGl0eSwgcHJvZml0LCBzZWxsQWxsLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm0uY2xvc2VEaWFsb2coKVxuICAgICAgICAgIHZtLnNob3dUb2FzdCgnc29sZCcsIHF1YW50aXR5LCB2bS5zeW1ib2wsICgocHJpY2UgKiBxdWFudGl0eSkudG9GaXhlZCgyKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pK1xcLikvZywgJyQxLCcpKSlcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3RyYW5zYWN0aW9uJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXZhdGFyJywgW10pXG4gICAgLmZhY3RvcnkoJ2F2YXRhcicsIGF2YXRhcilcblxuICBmdW5jdGlvbiBhdmF0YXIgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXRBdmF0YXI6IHNldEF2YXRhcixcbiAgICAgIGluaXRpYWxzOiBpbml0aWFsc1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEF2YXRhciAoc3RvY2tBcnJheSkge1xuICAgICAgc3RvY2tBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChzdG9jaykge1xuICAgICAgICBzdG9jay5hdmF0YXIgPSBpbml0aWFscyhzdG9jay5jb21wYW55KVxuICAgICAgfSlcbiAgICAgIHJldHVybiBzdG9ja0FycmF5XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbHMgKG5hbWUpIHtcbiAgICAgIHZhciBpbml0aWFscyA9IG5hbWUuc3BsaXQoJyAnLCAyKVxuICAgICAgdmFyIGF2YXRhciA9ICcnXG4gICAgICBpbml0aWFscy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtID09PSAnSW5jLicpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBhdmF0YXIgKz0gaXRlbVswXVxuICAgICAgfSlcbiAgICAgIHJldHVybiBhdmF0YXIudG9VcHBlckNhc2UoKVxuICAgIH1cbiAgfVxufSkoKVxuIiwiOyhmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3Nob3dXaXRoRGVsYXknLCBzaG93V2l0aERlbGF5KVxuXG4gIC8vIENPREUgU09VUkNFOiBodHRwczovL2NvZGVyZXZpZXcuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzYyMDA1L3Nob3ctd2l0aC1kZWxheS1kaXJlY3RpdmVcbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIHNob3dXaXRoRGVsYXkgKCR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWhpZGUnKVxuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKVxuICAgICAgICB9LCBhdHRycy5zaG93V2l0aERlbGF5IHx8IDIwMDApXG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3ByaWNlJywgW10pXG4gICAgLmZhY3RvcnkoJ3ByaWNlJywgcHJpY2UpXG5cbiAgZnVuY3Rpb24gcHJpY2UgKCRodHRwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByaWNlOiBnZXRQcmljZSxcbiAgICAgIGdldFByaWNlczogZ2V0UHJpY2VzXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpY2UgKHN5bWJvbCwgbWFya2V0LCBjYikge1xuICAgICAgaWYgKG1hcmtldCAhPT0gbnVsbCkge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgIC5nZXQoJy9hcGkvcHJpY2UvJyArIHN5bWJvbCArICcvJyArIG1hcmtldClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzLmRhdGEucHJpY2UpXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNiKCdFcnJvcjogJyArIGVyci5kYXRhLmVycm9yLCBudWxsKVxuICAgICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkaHR0cFxuICAgICAgICAgIC5nZXQoJy9hcGkvcHJpY2UvJyArIHN5bWJvbClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzLmRhdGEucHJpY2UpXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNiKCdFcnJvcjogc3RhdHVzICcgKyBlcnIuc3RhdHVzLCBudWxsKVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpY2VzIChzeW1ib2xzLCBjYikge1xuICAgICAgJGh0dHBcbiAgICAgICAgLnBvc3QoJy9hcGkvcHJpY2UvbXVsdGlwbGUnLCBzeW1ib2xzKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHJlcy5kYXRhLnByaWNlcylcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIHJldHVybiBjYignRXJyb3I6IHN0YXR1cyAnICsgZXJyLnN0YXR1cywgbnVsbClcbiAgICAgICAgfSlcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignaG9tZUNvbnRyb2xsZXInLCBob21lQ29udHJvbGxlcilcblxuICBmdW5jdGlvbiBob21lQ29udHJvbGxlciAoJGh0dHAsIGF2YXRhciwgZGlhbG9nKSB7XG4gICAgdmFyIHZtID0gdGhpc1xuXG4gICAgdm0ubWFya2V0cyA9IFsnVVMnLCAnTFNFJywgJ0VVUk8nLCAnVE1YJywgJ0hLRScsICdJTkRJQSddXG4gICAgdm0ubG9hZGluZyA9IGZhbHNlXG5cbiAgICB2bS5zaG93U2VsbCA9IGRpYWxvZy5zaG93U2VsbFxuICAgIHZtLnNob3dCdXkgPSBkaWFsb2cuc2hvd0J1eVxuICAgIHZtLmdldFJpc2Vyc0ZhbGxlcnMgPSBnZXRSaXNlcnNGYWxsZXJzXG5cbiAgICBnZXRSaXNlcnNGYWxsZXJzKCdVUycpXG5cbiAgICBmdW5jdGlvbiBnZXRSaXNlcnNGYWxsZXJzIChtYXJrZXQpIHtcbiAgICAgIHZtLmxvYWRpbmcgPSB0cnVlXG5cbiAgICAgIGlmICh2bVsnbWFya2V0cyddLmluY2x1ZGVzKG1hcmtldCkpIHtcbiAgICAgICAgJGh0dHBcbiAgICAgICAgICAuZ2V0KCcvYXBpL3Jpc2VmYWxsLycgKyBtYXJrZXQpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgIHZtLmVycm9yID0gcmVzLmRhdGEuZXJyb3JcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZtLmVycm9yID0gbnVsbFxuICAgICAgICAgICAgICB2bS5zdG9ja3MgPSByZXMuZGF0YS5zdG9ja3Muc3RvY2tzXG4gICAgICAgICAgICAgIGF2YXRhci5zZXRBdmF0YXIodm0uc3RvY2tzKVxuICAgICAgICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0b2Nrcy5uZXdEYXRhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnRXh0ZXJuYWwgQVBJIG5vdCBhdmFpbGFibGUgYXQgdGhpcyBtb21lbnQuIFNob3dpbmcgZGF0YSBvbGRlciB0aGFuIDEgaG91ci4nXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm0uZXJyb3IgPSAnTm8gc3VjaCBtYXJrZXQ6ICcgKyBtYXJrZXRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignbmV3c0NvbnRyb2xsZXInLCBuZXdzQ29udHJvbGxlcilcblxuICBmdW5jdGlvbiBuZXdzQ29udHJvbGxlciAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIG5ld3MpIHtcbiAgICB2YXIgdm0gPSB0aGlzXG5cbiAgICB2bS5nZXROZXdzID0gZ2V0TmV3c1xuXG4gICAgZnVuY3Rpb24gZ2V0TmV3cyAoc3ltYm9sKSB7XG4gICAgICBuZXdzLmdldE5ld3Moc3ltYm9sLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJhbmRvbU5ld3MgKCkge1xuICAgICAgbmV3cy5nZXRSYW5kb21OZXdzKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdm0uZXJyb3IgPSBlcnJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bS5uZXdzID0gW11cbiAgICAgICAgICByZXMuZGF0YS5uZXdzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtLm5ld3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0ubmV3cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZtLm5ld3MucHVzaChpdGVtLm5ld3NbaV0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIG5ld3Muc2h1ZmZsZU5ld3Modm0ubmV3cylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoJHN0YXRlLmN1cnJlbnQubmFtZSA9PT0gJ25ld3MnKSB7XG4gICAgICBnZXRSYW5kb21OZXdzKClcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0TmV3cygkc3RhdGVQYXJhbXMuc3ltYm9sKVxuICAgIH1cbiAgfVxufSkoKVxuIiwiOyhmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCduZXdzJywgW10pXG4gICAgLmZhY3RvcnkoJ25ld3MnLCBuZXdzKVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBuZXdzICgkaHR0cCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXROZXdzOiBnZXROZXdzLFxuICAgICAgZ2V0UmFuZG9tTmV3czogZ2V0UmFuZG9tTmV3cyxcbiAgICAgIHNodWZmbGVOZXdzOiBzaHVmZmxlTmV3c1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE5ld3MgKHN5bWJvbCwgY2IpIHtcbiAgICAgICRodHRwXG4gICAgICAgIC5nZXQoJy9hcGkvbmV3cy9zeW1ib2wvJyArIHN5bWJvbClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGNiKG51bGwsIHJlcylcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGNiKGVyciwgbnVsbClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSYW5kb21OZXdzIChjYikge1xuICAgICAgJGh0dHBcbiAgICAgICAgLmdldCgnL2FwaS9uZXdzL3JhbmRvbScpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBjYihudWxsLCByZXMpXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBjYihlcnIsIG51bGwpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gRmlzaGVy4oCTWWF0ZXMgc2h1ZmZsZSBhbGdvcml0aG0gZm9yIHJhbmRvbSBuZXdzIGFycmF5XG4gICAgZnVuY3Rpb24gc2h1ZmZsZU5ld3MgKGFycmF5KSB7XG4gICAgICB2YXIgbSA9IGFycmF5Lmxlbmd0aFxuICAgICAgdmFyIHRcbiAgICAgIHZhciBpXG5cbiAgICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxl4oCmXG4gICAgICB3aGlsZSAobSkge1xuICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnTigKZcbiAgICAgICAgaSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG0tLSlcblxuICAgICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgICAgIHQgPSBhcnJheVttXVxuICAgICAgICBhcnJheVttXSA9IGFycmF5W2ldXG4gICAgICAgIGFycmF5W2ldID0gdFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyYXlcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcigncHJvZmlsZUNvbnRyb2xsZXInLCBwcm9maWxlQ29udHJvbGxlcilcblxuICBmdW5jdGlvbiBwcm9maWxlQ29udHJvbGxlciAoJGh0dHAsIHByb2ZpbGUpIHtcbiAgICB2YXIgdm0gPSB0aGlzXG5cbiAgICB2bS5wcm9maWxlID0gcHJvZmlsZS5nZXRQcm9maWxlKClcblxuICAgIHByb2ZpbGUuZ2V0RnVuZHMoZnVuY3Rpb24gKGVyciwgZnVuZHMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdm0uZXJyb3IgPSBlcnJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLmZ1bmRzID0gZnVuZHNcbiAgICAgIH1cbiAgICB9KVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3Byb2ZpbGUnLCBbXSlcbiAgICAuZmFjdG9yeSgncHJvZmlsZScsIHByb2ZpbGUpXG5cbiAgZnVuY3Rpb24gcHJvZmlsZSAoJGh0dHApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0VXNlcjogZ2V0VXNlcixcbiAgICAgIGdldFN0b2NrQW5kRnVuZHM6IGdldFN0b2NrQW5kRnVuZHMsXG4gICAgICBnZXRQcm9maWxlOiBnZXRQcm9maWxlLFxuICAgICAgZ2V0RnVuZHM6IGdldEZ1bmRzLFxuICAgICAgYnV5U3RvY2s6IGJ1eVN0b2NrLFxuICAgICAgc2VsbFN0b2NrOiBzZWxsU3RvY2ssXG4gICAgICB3ZWlnaHRlZEF2ZXJhZ2U6IHdlaWdodGVkQXZlcmFnZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByb2ZpbGUgKCkge1xuICAgICAgdmFyIHVzZXJQcm9maWxlID0gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2ZpbGUnKSlcblxuICAgICAgaWYgKH51c2VyUHJvZmlsZS5uYW1lLmluZGV4T2YoJ0AnKSkge1xuICAgICAgICB1c2VyUHJvZmlsZS5uYW1lID0gdXNlclByb2ZpbGUubmFtZS5zcGxpdCgnQCcpWzBdXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1c2VyUHJvZmlsZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVzZXIgKGNiKSB7XG4gICAgICAkaHR0cFxuICAgICAgICAuZ2V0KCcvYXBpL3VzZXIvJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGNiKHJlcy5kYXRhLnVzZXIpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RnVuZHMgKGNiKSB7XG4gICAgICAkaHR0cFxuICAgICAgICAuZ2V0KCcvYXBpL3VzZXIvZnVuZHMvJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGNiKG51bGwsIHJlcy5kYXRhLmZ1bmRzKVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgY2IoJ0Vycm9yOiBDYW5ub3QgZ2V0IGZ1bmRzIScgKyBlcnIsIG51bGwpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RvY2tBbmRGdW5kcyAoc3ltYm9sLCBjYikge1xuICAgICAgJGh0dHBcbiAgICAgICAgLmdldCgnL2FwaS91c2VyL3BvcnRmb2xpby8nICsgc3ltYm9sKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBzdG9jazogcmVzLmRhdGEuc3RvY2ssXG4gICAgICAgICAgICBmdW5kczogcmVzLmRhdGEuZnVuZHNcbiAgICAgICAgICB9XG4gICAgICAgICAgY2IobnVsbCwgZGF0YSlcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGNiKCdFcnJvcjogc3RhdHVzJyArIGVyci5zdGF0dXMsIG51bGwsIG51bGwpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnV5U3RvY2sgKHN5bWJvbCwgY29tcGFueSwgYXZnUHJpY2UsIHByaWNlLCB0b3RhbFF0eSwgZnVuZHMsIGV4aXN0cywgY2IpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgICAgY29tcGFueTogY29tcGFueSxcbiAgICAgICAgcHJpY2U6IGF2Z1ByaWNlLFxuICAgICAgICBidXlQcmljZTogcHJpY2UsXG4gICAgICAgIHF1YW50aXR5OiB0b3RhbFF0eSxcbiAgICAgICAgZnVuZHM6IGZ1bmRzLnRvRml4ZWQoMyksXG4gICAgICAgIGV4aXN0czogZXhpc3RzXG4gICAgICB9XG5cbiAgICAgICRodHRwXG4gICAgICAgIC5wb3N0KCcvYXBpL3VzZXIvYnV5JywgZGF0YSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGNiKG51bGwsIHJlcylcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGNiKGVyciwgbnVsbClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxsU3RvY2sgKHN5bWJvbCwgY29tcGFueSwgc2VsbFByaWNlLCBxdWFudGl0eSwgcHJvZml0LCBzZWxsQWxsLCBjYikge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgICBjb21wYW55OiBjb21wYW55LFxuICAgICAgICBzZWxsUHJpY2U6IHNlbGxQcmljZSxcbiAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxuICAgICAgICBwcm9maXQ6IHByb2ZpdCxcbiAgICAgICAgc2VsbEFsbDogc2VsbEFsbFxuICAgICAgfVxuXG4gICAgICAkaHR0cFxuICAgICAgICAucG9zdCgnYXBpL3VzZXIvc2VsbCcsIGRhdGEpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBjYihudWxsLCByZXMpXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgY2IoZXJyLCBudWxsKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlaWdodGVkQXZlcmFnZSAocHJldlByaWNlLCBjdXJyUHJpY2UsIHByZXZRdHksIGN1cnJRdHkpIHtcbiAgICAgIHJldHVybiAoKChwcmV2UHJpY2UgKiBwcmV2UXR5KSArIChjdXJyUHJpY2UgKiBjdXJyUXR5KSkgLyAocHJldlF0eSArIGN1cnJRdHkpKS50b0ZpeGVkKDMpXG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ3BvcnRmb2xpb0NvbnRyb2xsZXInLCBwb3J0Zm9saW9Db250cm9sbGVyKVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBwb3J0Zm9saW9Db250cm9sbGVyICgkc2NvcGUsICRpbnRlcnZhbCwgJGh0dHAsIHByaWNlLCBkaWFsb2csIGF2YXRhcikge1xuICAgIHZhciB2bSA9IHRoaXNcblxuICAgIHZtLnNob3dTZWxsID0gZGlhbG9nLnNob3dTZWxsXG4gICAgdm0uc2hvd0J1eSA9IGRpYWxvZy5zaG93QnV5XG4gICAgdm0uZ2V0UG9ydGZvbGlvID0gZ2V0UG9ydGZvbGlvXG4gICAgdm0ucG9ydGZvbGlvID0gbnVsbFxuXG4gICAgJHNjb3BlLiRvbigndHJhbnNhY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBnZXRQb3J0Zm9saW8oKVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBnZXRQb3J0Zm9saW8gKCkge1xuICAgICAgJGh0dHBcbiAgICAgICAgLmdldCgnL2FwaS91c2VyL3BvcnRmb2xpbycpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgdm0ubm9Qb3J0Zm9saW8gPSByZXMuZGF0YS5tZXNzYWdlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZtLnBvcnRmb2xpbyA9IHJlcy5kYXRhLnBvcnRmb2xpb1xuICAgICAgICAgICAgdm0uZnVuZHMgPSByZXMuZGF0YS5mdW5kc1xuICAgICAgICAgICAgZ2V0UHJpY2VzKHZtLnBvcnRmb2xpbylcbiAgICAgICAgICAgIGF2YXRhci5zZXRBdmF0YXIodm0ucG9ydGZvbGlvKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmljZXMgKHBvcnRmb2xpbykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBbXVxuICAgICAgcG9ydGZvbGlvLmZvckVhY2goZnVuY3Rpb24gKHN0b2NrKSB7XG4gICAgICAgIHN5bWJvbHMucHVzaChzdG9jay5zeW1ib2wpXG4gICAgICB9KVxuICAgICAgcHJpY2UuZ2V0UHJpY2VzKHN5bWJvbHMsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdm0uZXJyb3IgPSBlcnJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRjaFByaWNlcyh2bS5wb3J0Zm9saW8sIHJlcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaFByaWNlcyAodXNlclBvcnRmb2xpbywgY3VyclByaWNlcykge1xuICAgICAgdXNlclBvcnRmb2xpby5mb3JFYWNoKGZ1bmN0aW9uICh1c2VyU3RvY2spIHtcbiAgICAgICAgY3VyclByaWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9jaykge1xuICAgICAgICAgIGlmIChzdG9jay5zeW1ib2wgPT09IHVzZXJTdG9jay5zeW1ib2wpIHtcbiAgICAgICAgICAgIHVzZXJTdG9jay51cGRhdGVkQXQgPSBzdG9jay51cGRhdGVkQXRcbiAgICAgICAgICAgIHVzZXJTdG9jay5jdXJyUHJpY2UgPSBzdG9jay5wcmljZVxuICAgICAgICAgICAgdXNlclN0b2NrLm1hcmtldCA9IHN0b2NrLm1hcmtldFxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdXNlclBvcnRmb2xpb1xuICAgIH1cblxuICAgIC8vIFNldHMgaW50ZXJ2YWwgb2YgNSBtaW51dGVzIGZvciBhdXRvLXVwZGF0aW5nIHByaWNlcyBvbiBVSVxuICAgIC8vIFN0b3BzIGludGVydmFsIGFmdGVyIDUwIG1pbnV0ZXNcbiAgICB2YXIgdXBkYXRlUHJpY2VcbiAgICBmdW5jdGlvbiBhdXRvdXBkYXRlICgpIHtcbiAgICAgIHVwZGF0ZVByaWNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2V0UHJpY2VzKHZtLnBvcnRmb2xpbylcbiAgICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZSBvZiBwb3J0Zm9saW8gcHJpY2VzJylcbiAgICAgIH0sIDEwMDAgKiA2MCAqIDUsIDEwKVxuICAgIH1cblxuICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgJGludGVydmFsLmNhbmNlbCh1cGRhdGVQcmljZSlcbiAgICAgIHVwZGF0ZVByaWNlID0gdW5kZWZpbmVkXG4gICAgfSlcblxuICAgIC8vIEZpcmUgdG8gcG9wdWxhdGUgRE9NIHdpdGggZGF0YVxuICAgIGdldFBvcnRmb2xpbygpXG5cbiAgICAvLyBGaXJlIHRvIHN0YXJ0IHVwZGF0ZSBvZiBwcmljZXMgZXZlcnkgNSBtaW51dGVzXG4gICAgYXV0b3VwZGF0ZSgpXG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignc2VhcmNoQ29udHJvbGxlcicsIHNlYXJjaENvbnRyb2xsZXIpXG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIHNlYXJjaENvbnRyb2xsZXIgKCRodHRwLCAkc3RhdGUpIHtcbiAgICB2YXIgdm0gPSB0aGlzXG5cbiAgICB2bS5xdWVyeVN0b2NrID0gcXVlcnlTdG9ja1xuICAgIHZtLmdldERhdGEgPSBnZXREYXRhXG5cbiAgICBmdW5jdGlvbiBxdWVyeVN0b2NrIChzdG9jaykge1xuICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgIC5nZXQoJy9hcGkvZGF0YS9zeW1ib2xzLycgKyBzdG9jaylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIHZhciByZXN1bHRzID0gW11cblxuICAgICAgICAgIHJlcy5kYXRhLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGl0ZW0uc3ltYm9sKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0c1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGEgKGl0ZW0pIHtcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ3N0b2NrJywge3N5bWJvbDogaXRlbX0pXG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnc2VhcmNoJywgc2VhcmNoKVxuXG4gIGZ1bmN0aW9uIHNlYXJjaCAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvc2VhcmNoL3NlYXJjaC50ZW1wbGF0ZS5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXI6ICdzZWFyY2hDb250cm9sbGVyJyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3NlYXJjaCdcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignc2lkZW5hdkNvbnRyb2xsZXInLCBzaWRlbmF2Q29udHJvbGxlcilcblxuICBmdW5jdGlvbiBzaWRlbmF2Q29udHJvbGxlciAoJGh0dHAsICRyb290U2NvcGUsICRzY29wZSwgJGxvY2F0aW9uLCBhdXRoLCBzdG9yZSxcbiAgICBzaWRlbmF2LCBwcm9maWxlKSB7XG4gICAgdmFyIHZtID0gdGhpc1xuXG4gICAgdm0uZ2V0TmV3cyA9IGdldE5ld3NcbiAgICB2bS5sb2dvdXQgPSBsb2dvdXRcblxuICAgIHZtLmNsb3NlU2lkZW5hdiA9IHNpZGVuYXYuY2xvc2VTaWRlbmF2XG4gICAgdm0uYXV0aCA9IGF1dGhcblxuICAgIHZtLm1lc3NhZ2UgPSAnJ1xuICAgIHZtLnNpZGVuYXZTaG93ID0gZmFsc2VcblxuICAgIC8vIEtlZXAgcHJvZmlsZSBkYXRhIGFuZCBzaWRlbmF2IG9wZW4gb24gcGFnZSByZWZyZXNoXG4gICAgLy8gaWYgdXNlciBpcyBsb2dnZWQgaW5cbiAgICBpZiAodm0uYXV0aC5pc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHZtLnByb2ZpbGUgPSBwcm9maWxlLmdldFByb2ZpbGUoKVxuICAgICAgdm0uc2lkZW5hdlNob3cgPSB0cnVlXG4gICAgICBnZXRGdW5kcygpXG4gICAgfVxuXG4gICAgJHNjb3BlLiRvbigndXNlckxvZ0luJywgZnVuY3Rpb24gKCkge1xuICAgICAgdm0ucHJvZmlsZSA9IHByb2ZpbGUuZ2V0UHJvZmlsZSgpXG4gICAgICB2bS5zaWRlbmF2U2hvdyA9IHRydWVcbiAgICAgIGdldEZ1bmRzKClcbiAgICB9KVxuXG4gICAgJHNjb3BlLiRvbigndHJhbnNhY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBnZXRGdW5kcygpXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGdldEZ1bmRzICgpIHtcbiAgICAgIHByb2ZpbGUuZ2V0RnVuZHMoZnVuY3Rpb24gKGVyciwgZnVuZHMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICAgIH1cbiAgICAgICAgdm0uZnVuZHMgPSBmdW5kc1xuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXROZXdzICgpIHtcbiAgICAgICRodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9uZXdzL0FBUEwnLCB7XG4gICAgICAgIHNraXBBdXRob3JpemF0aW9uOiB0cnVlXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2bS5tZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5uZXdzLnN5bWJvbFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dvdXQgKCkge1xuICAgICAgLy8gVGhlIHNpZ25vdXQgbWV0aG9kIG9uIHRoZSBhdXRoIHNlcnZpY2VcbiAgICAgIC8vIHNldHMgaXNBdXRoZW50aWNhdGVkIHRvIGZhbHNlIGJ1dCB3ZVxuICAgICAgLy8gYWxzbyBuZWVkIHRvIHJlbW92ZSB0aGUgcHJvZmlsZSBhbmRcbiAgICAgIC8vIHRva2VuIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgICAgYXV0aC5zaWdub3V0KClcbiAgICAgIHN0b3JlLnJlbW92ZSgncHJvZmlsZScpXG4gICAgICBzdG9yZS5yZW1vdmUoJ3Rva2VuJylcbiAgICAgIHZtLnNpZGVuYXZTaG93ID0gZmFsc2VcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbG9nZ2VkLWluJylcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXNlckxvZ091dCcpXG4gICAgICB2bS51c2VyTG9nZ2VkID0gZmFsc2VcbiAgICAgICRsb2NhdGlvbi5wYXRoKCcvd2VsY29tZScpXG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnc2lkZW5hdicsIHNpZGVuYXYpXG5cbiAgZnVuY3Rpb24gc2lkZW5hdiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvc2lkZW5hdi9zaWRlbmF2LnRlbXBsYXRlLmh0bWwnLFxuICAgICAgY29udHJvbGxlcjogJ3NpZGVuYXZDb250cm9sbGVyJyxcbiAgICAgIGNvbnRyb2xsZXJBczogJ3NpZGVuYXYnXG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3NpZGVuYXYnLCBbXSlcbiAgICAuZmFjdG9yeSgnc2lkZW5hdicsIHNpZGVuYXYpXG5cbiAgZnVuY3Rpb24gc2lkZW5hdiAoJG1kU2lkZW5hdiwgYXV0aCwgc3RvcmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9nZ2xlU2lkZW5hdjogdG9nZ2xlU2lkZW5hdixcbiAgICAgIGNsb3NlU2lkZW5hdjogY2xvc2VTaWRlbmF2XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZW5hdiAoaWQpIHtcbiAgICAgICRtZFNpZGVuYXYoaWQgfHwgJ2xlZnQnKS50b2dnbGUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlU2lkZW5hdiAoaWQpIHtcbiAgICAgICRtZFNpZGVuYXYoaWQgfHwgJ2xlZnQnKS5jbG9zZSgpXG4gICAgfVxuICB9XG59KSgpXG4iLCI7KGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ3N0b2NrQ29udHJvbGxlcicsIHN0b2NrQ29udHJvbGxlcilcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gc3RvY2tDb250cm9sbGVyICgkaW50ZXJ2YWwsICRzY29wZSwgJHN0YXRlUGFyYW1zLCAkaHR0cCwgZGlhbG9nLCBwcmljZSwgbmV3cywgYXZhdGFyKSB7XG4gICAgdmFyIHZtID0gdGhpc1xuXG4gICAgdm0ubG9hZGluZyA9IGZhbHNlXG5cbiAgICB2bS5zaG93QnV5ID0gZGlhbG9nLnNob3dCdXlcbiAgICB2bS5zaG93U2VsbCA9IGRpYWxvZy5zaG93U2VsbFxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0YSAoKSB7XG4gICAgICB2bS5sb2FkaW5nID0gdHJ1ZVxuXG4gICAgICAkaHR0cFxuICAgICAgICAuZ2V0KCcvYXBpL2RhdGEvc3ltYm9sLycgKyAkc3RhdGVQYXJhbXMuc3ltYm9sICsgJy8nICsgJHN0YXRlUGFyYW1zLm1hcmtldClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGlmIChyZXMuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgdm0ubm9Db21wYW55ID0gcmVzLmRhdGEuZXJyb3JcbiAgICAgICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2bS5jb21wYW55ID0gcmVzLmRhdGEuZGF0YVxuXG4gICAgICAgICAgICBpZiAodm0uY29tcGFueS5uZXdEYXRhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICB2bS5vbGREYXRhID0gJ0V4dGVybmFsIEFQSSBub3QgYXZhaWxhYmxlIGF0IHRoaXMgbW9tZW50LiBTaG93aW5nIHN5bWJvbCBkYXRhIG9sZGVyIHRoYW4gMSBkYXkuJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmljZS5nZXRQcmljZSgkc3RhdGVQYXJhbXMuc3ltYm9sLCAkc3RhdGVQYXJhbXMubWFya2V0IHx8IHZtLmNvbXBhbnkubWFya2V0LCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0ucHJpY2UgPSByZXMucHJpY2VcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVkQXQgPSByZXMudXBkYXRlZEF0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIG5ld3MuZ2V0TmV3cygkc3RhdGVQYXJhbXMuc3ltYm9sLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHZtLm5ld3NFcnJvciA9ICdFcnJvciBnZXR0aW5nIG5ld3MnXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZtLm5ld3MgPSByZXMuZGF0YS5uZXdzLm5ld3NcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHZtLm5ld3NFcnJvciA9IGVyclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHZtLmF2YXRhciA9IGF2YXRhci5pbml0aWFscyh2bS5jb21wYW55LmNvbXBhbnkgfHwgJHN0YXRlUGFyYW1zLnN5bWJvbClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gU2V0cyBpbnRlcnZhbCBvZiA1IG1pbnV0ZXMgZm9yIGF1dG8tdXBkYXRpbmcgc3RvY2sgcHJpY2Ugb24gVUlcbiAgICAvLyBTdG9wcyBpbnRlcnZhbCBhZnRlciA1MCBtaW51dGVzXG4gICAgdmFyIHVwZGF0ZVByaWNlXG4gICAgZnVuY3Rpb24gYXV0b3VwZGF0ZSAoKSB7XG4gICAgICB1cGRhdGVQcmljZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByaWNlLmdldFByaWNlKCRzdGF0ZVBhcmFtcy5zeW1ib2wsICRzdGF0ZVBhcmFtcy5tYXJrZXQgfHwgdm0uY29tcGFueS5tYXJrZXQsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHZtLmVycm9yID0gZXJyXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZtLnByaWNlID0gcmVzXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUHJpY2UgdXBkYXRlZCBmb3IgJyArICRzdGF0ZVBhcmFtcy5zeW1ib2wgKyAnIC8gJyArICRzdGF0ZVBhcmFtcy5tYXJrZXQgfHwgdm0uY29tcGFueS5tYXJrZXQpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSwgMTAwMCAqIDYwICogNSwgMTApXG4gICAgfVxuXG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkaW50ZXJ2YWwuY2FuY2VsKHVwZGF0ZVByaWNlKVxuICAgICAgdXBkYXRlUHJpY2UgPSB1bmRlZmluZWRcbiAgICB9KVxuXG4gICAgLy8gRmlyZSB0byBwb3B1bGF0ZSBET00gd2l0aCBkYXRhXG4gICAgZ2V0RGF0YSgpXG5cbiAgICAvLyBGaXJlIHRvIHN0YXJ0IGF1dG8tdXBkYXRlIGludGVydmFsXG4gICAgYXV0b3VwZGF0ZSgpXG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcigndG9vbGJhckNvbnRyb2xsZXInLCB0b29sYmFyQ29udHJvbGxlcilcblxuICBmdW5jdGlvbiB0b29sYmFyQ29udHJvbGxlciAoYXV0aCwgc3RvcmUsICRsb2NhdGlvbiwgJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgc2lkZW5hdikge1xuICAgIHZhciB2bSA9IHRoaXNcblxuICAgIHZtLmxvZ2luID0gbG9naW5cblxuICAgIHZtLmF1dGggPSBhdXRoXG4gICAgdm0udG9nZ2xlU2lkZW5hdiA9IHNpZGVuYXYudG9nZ2xlU2lkZW5hdlxuICAgIHZtLnVzZXJMb2dnZWQgPSBmYWxzZVxuXG4gICAgaWYgKGF1dGguaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICB2bS51c2VyTG9nZ2VkID0gdHJ1ZVxuICAgIH1cblxuICAgICRzY29wZS4kb24oJ3VzZXJMb2dPdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS51c2VyTG9nZ2VkID0gZmFsc2VcbiAgICB9KVxuXG4gICAgJHNjb3BlLiRvbigndXNlckxvZ0luJywgZnVuY3Rpb24gKCkge1xuICAgICAgdm0udXNlckxvZ2dlZCA9IHRydWVcbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gbG9naW4gKCkge1xuICAgICAgLy8gVGhlIGF1dGggc2VydmljZSBoYXMgYSBzaWduaW4gbWV0aG9kIHRoYXRcbiAgICAgIC8vIG1ha2VzIHVzZSBvZiBBdXRoMExvY2suIElmIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvLyBpcyBzdWNjZXNzZnVsLCB0aGUgdXNlcidzIHByb2ZpbGUgYW5kIHRva2VuXG4gICAgICAvLyBhcmUgc2F2ZWQgaW4gbG9jYWwgc3RvcmFnZSB3aXRoIHRoZSBzdG9yZSBzZXJ2aWNlXG5cbiAgICAgIGF1dGguc2lnbmluKHtcbiAgICAgICAgYXV0aFBhcmFtczoge1xuICAgICAgICAgIHNjb3BlOiAnb3BlbmlkIGVtYWlsJ1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbiAocHJvZmlsZSwgdG9rZW4pIHtcbiAgICAgICAgc3RvcmUuc2V0KCdwcm9maWxlJywgcHJvZmlsZSlcbiAgICAgICAgc3RvcmUuc2V0KCd0b2tlbicsIHRva2VuKVxuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2xvZ2dlZC1pbicpXG4gICAgICAgIHZtLnVzZXJMb2dnZWQgPSB0cnVlXG4gICAgICAgIHVzZXJBY2NvdW50KGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICB2bS5tZXNzYWdlID0gcmVzLmRhdGEubWVzc2FnZVxuICAgICAgICAgIHZtLmZ1bmRzID0gcmVzLmRhdGEudXNlci5mdW5kc1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXNlckxvZ0luJylcbiAgICAgICAgfSlcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlckFjY291bnQgKGNiKSB7XG4gICAgICAkaHR0cFxuICAgICAgICAuZ2V0KCdhcGkvdXNlci8nKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgY2IocmVzKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHZtLmZlYXR1cmVzID0gW1xuICAgICAgJyQxMDAsMDAwIHN0YXJ0aW5nIGZ1bmRzJyxcbiAgICAgICdSZWFsLXRpbWUgc3RvY2sgcHJpY2VzJyxcbiAgICAgICdTaXggaW50ZXJuYXRpb25hbCBzdG9jayBtYXJrZXRzJyxcbiAgICAgICdTdG9jayByaXNlcnMgYW5kIGZhbGxlcnMnLFxuICAgICAgJ0RhaWx5IG5ld3MgZm9yIG1hcmtldCBjb21wYW5pZXMnLFxuICAgICAgJ1VwLXRvLWRhdGUgY29tcGFueSBkYXRhJyxcbiAgICAgICdVc2VyLWZyaWVuZGx5IGludGVyZmFjZSdcbiAgICBdXG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCd0b29sYmFyJywgdG9vbGJhcilcblxuICBmdW5jdGlvbiB0b29sYmFyICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29tcG9uZW50cy90b29sYmFyL3Rvb2xiYXIudGVtcGxhdGUuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiAndG9vbGJhckNvbnRyb2xsZXInLFxuICAgICAgY29udHJvbGxlckFzOiAndG9vbGJhcidcbiAgICB9XG4gIH1cbn0pKClcbiIsIjsoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCdcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcigndHJhbnNhY3Rpb25zQ29udHJvbGxlcicsIHRyYW5zYWN0aW9uc0NvbnRyb2xsZXIpXG5cbiAgZnVuY3Rpb24gdHJhbnNhY3Rpb25zQ29udHJvbGxlciAoJGh0dHAsIGF2YXRhcikge1xuICAgIHZhciB2bSA9IHRoaXNcblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9ucyAoKSB7XG4gICAgICAkaHR0cFxuICAgICAgICAuZ2V0KCcvYXBpL3RyYW5zYWN0aW9uL2FsbCcpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgIHZtLm5vVHJhbnNhY3Rpb25zID0gcmVzLmRhdGEuZXJyb3JcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25zID0gcmVzLmRhdGEudHJhbnNhY3Rpb25zXG4gICAgICAgICAgICBhdmF0YXIuc2V0QXZhdGFyKHZtLnRyYW5zYWN0aW9ucylcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICB2bS5lcnJvciA9IGVyclxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFRyYW5zYWN0aW9ucygpXG4gIH1cbn0pKClcbiJdfQ==
